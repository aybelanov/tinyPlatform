@model LoginModel
@using Hub.Core
@using Hub.Core.Domain.Users

@inject IWebHelper webHelper
@{
   Layout = "_ColumnsOne";

   //title
   AppHtml.AddTitleParts(T("PageTitle.Login").Text);
   //page class
   AppHtml.AppendPageCssClassParts("html-login-page");

   //register URL with return URL (if specified)
   //var registerUrl = Url.RouteUrl("Register", new { returnUrl = this.Context.Request.Query["returnUrl"] }, webHelper.GetCurrentRequestProtocol());
}
<div class="page login-page">
   @*<div class="page-title">
   <h2>@T("Account.Login.Welcome")</h2>
   </div>*@
   @await Html.PartialAsync("_ExternalAuthentication.Errors")
   <div class="returning-wrapper fieldset">
      <form asp-route="Login" asp-route-returnurl="@Context.Request.Query["ReturnUrl"]" method="post" autocomplete="off">
         <div asp-validation-summary="ModelOnly" class="message-error">@T("Account.Login.Unsuccessful")</div>
         <div class="title">
            <strong>@T("Account.Login.Welcome")</strong>
         </div>
         <div class="form-fields">
            @if (Model.UsernamesEnabled)
            {
               <div class="inputs">
                  <label asp-for="Username" asp-postfix=":"></label>
                  <input asp-for="Username" class="username" autofocus="autofocus" />
                  <span asp-validation-for="Username"></span>
               </div>
            }
            else
            {
               <div class="inputs">
                  <label asp-for="Email" asp-postfix=":"></label>
                  <input asp-for="Email" class="email" autofocus="autofocus" />
                  <span asp-validation-for="Email"></span>
               </div>
            }
            <div class="inputs">
               <label asp-for="Password" asp-postfix=":"></label>
               <input asp-for="Password" class="password" />
               <span asp-validation-for="Password"></span>
            </div>
            <div class="inputs reversed">
               <input asp-for="RememberMe" />
               <label asp-for="RememberMe"></label>
               <span class="forgot-password">
                  <a asp-route="PasswordRecovery">@T("Account.Login.ForgotPassword")</a>
               </span>
            </div>
            @if (Model.DisplayCaptcha)
            {
               <app-captcha />
            }
         </div>
         <div class="buttons">
            <button type="submit" class="button-1 login-button">@T("Account.Login.LoginButton")</button>
         </div>
      </form>
   </div>
</div>
<div class="external-authentication">
   @await Component.InvokeAsync("ExternalMethods", "ExternalAuthentication")
</div>
@await Component.InvokeAsync("TopicBlock", new { systemName = "LoginRegistrationInfo" })
@* </div>
</div>*@