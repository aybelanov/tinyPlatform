@model HeaderLinksModel
@using Hub.Core.Configuration;
@using Hub.Core.Domain.Users
@inject Hub.Core.IWebHelper webHelper
@inject AppSettings appSetting

<div class="header-links">
   <ul>
      @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksBefore, additionalData = Model })
      @if (Model.IsAuthenticated)
      {
         if (Model.HasToClientAcccess)
         {
            <li><a href="@(appSetting.Get<HostingConfig>().ClientHostUrl)" class="ico-account"><b>@T("HeaderLink.ClientName")</b></a></li>
         }
         <li><a href="@Url.RouteUrl("UserInfo")" class="ico-account">@*@T("Account.MyAccount")*@@Model.UserName</a></li>
         <li><a href="@Url.RouteUrl("Logout")" class="ico-logout">@T("Account.Logout")</a></li>
      }
      else
      {
         var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
         ? url.ToString()
         : webHelper.GetRawUrl(Context.Request);

         @if (Model.RegistrationType != UserRegistrationType.Disabled)
         {
            <li><a href="@Url.RouteUrl("Register", new { returnUrl })" class="ico-register">@T("Account.Register")</a></li>
         }
         <li><a href="@Url.RouteUrl("Login", new { returnUrl })" class="ico-login">@T("Account.Login")</a></li>
      }
      @if (Model.AllowPrivateMessages)
      {
         <li>
            <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">
               <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
               <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
            </a>
         </li>
      }
      @if (Model.WishlistEnabled)
      {
         <li>
            <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist">
               <span class="wishlist-label">@T("Wishlist")</span>
               <span class="wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
            </a>
         </li>
      }
      @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksAfter, additionalData = Model })
   </ul>
   @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
   {
      //new private message notification
      <script asp-location="Footer">
         $(document).ready(function () {
            displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
         });
      </script>
   }
</div>
