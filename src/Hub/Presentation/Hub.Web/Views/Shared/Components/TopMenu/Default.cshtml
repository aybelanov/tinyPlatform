@model TopMenuModel

@functions {
   
}

<ul class="top-menu notmobile">
   @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderMenuBefore, additionalData = Model })
   @if (Model.DisplayHomepageMenuItem)
   {
      <li><a href="@Url.RouteUrl("Homepage")">@T("Homepage")</a></li>
   }
   @foreach (var topic in Model.Topics)
   {
      <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
   }
   @if (Model.DisplayUserInfoMenuItem)
   {
      <li><a href="@Url.RouteUrl("UserInfo")">@T("Account.MyAccount")</a></li>
   }
   @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
   {
      <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
   }
   @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
   {
      <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
   }
   @if (Model.DisplayContactUsMenuItem)
   {
      <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
   }
   @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderMenuAfter, additionalData = Model })
</ul>
@{
   //name it "Categories" if we have only categories. Otherwise, "Menu"
   var responsiveMenuTitle = Model.HasOnlyCategories ? T("Categories") : T("Menu");
   <div class="menu-toggle">@responsiveMenuTitle</div>
   <ul class="top-menu mobile">
      @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MobHeaderMenuBefore, additionalData = Model })
      @if (Model.DisplayHomepageMenuItem)
      {
         <li><a href="@Url.RouteUrl("Homepage")">@T("Homepage")</a></li>
      }
      @foreach (var topic in Model.Topics)
      {
         <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
      }
      @if (Model.DisplayUserInfoMenuItem)
      {
         <li><a href="@Url.RouteUrl("UserInfo")">@T("Account.MyAccount")</a></li>
      }
      @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
      {
         <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
      }
      @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
      {
         <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
      }
      @if (Model.DisplayContactUsMenuItem)
      {
         <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
      }
      @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MobHeaderMenuAfter, additionalData = Model })
   </ul>

   @if (Model.UseAjaxMenu)
   {
      <script asp-location="Footer">
         $(document).ready(function () {
            $('.menu-toggle').on('click', function () {
               $(this).siblings('.top-menu.mobile').slideToggle('slow');
            });
            var localized_data = {
               AjaxFailure: "@T("MainMenu.AjaxFailure")"
            };
            mainMenu.init('@Url.RouteUrl("GetCatalogRoot")', '@Url.RouteUrl("GetCatalogSubCategories")', 'ul.top-menu.notmobile', 'ul.top-menu.mobile', localized_data);
         });
      </script>

      <script src="~/js/public.menu.js" asp-location="Footer"></script>

   }
   else
   {
      <script asp-location="Footer">
         $(document).ready(function () {
            $('.menu-toggle').on('click', function () {
               $(this).siblings('.top-menu.mobile').slideToggle('slow');
            });
            $('.top-menu.mobile .sublist-toggle').on('click', function () {
               $(this).siblings('.sublist').slideToggle('slow');
            });
         });
      </script>

   }

}