// <auto-generated />
using System;
using Hub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hub.Data.PostgreSqlMigrations.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hub.Core.Domain.Blogs.BlogComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BlogPostId")
                        .HasColumnType("bigint");

                    b.Property<string>("CommentText")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogComments", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Blogs.BlogPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AllowComments")
                        .HasColumnType("boolean");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BodyOverview")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IncludeInSitemap")
                        .HasColumnType("boolean");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<DateTime?>("StartDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("BlogPosts", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.Command", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Arguments")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceCommands", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.Device", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdminComment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CannotLoginUntilDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ClearDataDelay")
                        .HasColumnType("integer");

                    b.Property<string>("Configuration")
                        .HasColumnType("text");

                    b.Property<int>("CountDataRows")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DataPacketSize")
                        .HasColumnType("integer");

                    b.Property<int>("DataSendingDelay")
                        .HasColumnType("integer");

                    b.Property<int>("DataflowReconnectDelay")
                        .HasColumnType("integer");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMobile")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActivityOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastIpAddress")
                        .HasColumnType("text");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("PictureId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShowOnMain")
                        .HasColumnType("boolean");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SystemName")
                        .IsUnique()
                        .HasFilter("\"IsDeleted\" = false");

                    b.ToTable("Devices", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.DeviceCredential", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("PasswordFormat")
                        .HasColumnType("integer");

                    b.Property<long>("PasswordFormatId")
                        .HasColumnType("bigint");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceCredentials", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.DownloadTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CurrentState")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DelayUntilUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("QueryString")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReadyDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TaskDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DownloadTracker", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.Monitor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdminComment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("PictureId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShowInMenu")
                        .HasColumnType("boolean");

                    b.Property<bool>("SubjectToAcl")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Monitors", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.Presentation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<long>("MonitorId")
                        .HasColumnType("bigint");

                    b.Property<long>("SensorWidgetId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SensorWidgetId");

                    b.HasIndex("MonitorId", "SensorWidgetId")
                        .IsUnique();

                    b.ToTable("MonitorSensorWidgets", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.Sensor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdminComment")
                        .HasColumnType("text");

                    b.Property<string>("Configuration")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("PictureId")
                        .HasColumnType("bigint");

                    b.Property<int>("PriorityType")
                        .HasColumnType("integer");

                    b.Property<int>("SensorType")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowInCommonLog")
                        .HasColumnType("boolean");

                    b.Property<bool>("SubjectToAcl")
                        .HasColumnType("boolean");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId", "SystemName")
                        .IsUnique()
                        .HasFilter("\"IsDeleted\" = false");

                    b.ToTable("Sensors", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.SensorRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("Bytes")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedTimeOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EventTimestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("JsonValue")
                        .HasColumnType("text");

                    b.Property<string>("Metadata")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("SensorId")
                        .HasColumnType("bigint");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("SensorRecords", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.SensorWidget", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<long>("SensorId")
                        .HasColumnType("bigint");

                    b.Property<long>("WidgetId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.HasIndex("WidgetId", "SensorId")
                        .IsUnique();

                    b.ToTable("SensorWidgets", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.VideoSegment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Extinf")
                        .HasColumnType("double precision");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("InboundName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("IpcamId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OnCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OnReceivedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Resolution")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IpcamId");

                    b.ToTable("VideoSegments", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.VideoSegmentBinary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("Binary")
                        .HasColumnType("bytea");

                    b.Property<long>("VideoSegmentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VideoSegmentId")
                        .IsUnique();

                    b.ToTable("VideoSegmentBinaries", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.Widget", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Adjustment")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("AdminComment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("LiveSchemePictureId")
                        .HasColumnType("bigint");

                    b.Property<long>("PictureId")
                        .HasColumnType("bigint");

                    b.Property<bool>("SubjectToAcl")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("WidgetType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Widgets", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Common.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address1")
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("County")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomAttributes")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<long?>("StateProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("ZipPostalCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StateProvinceId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Common.AddressAttribute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AttributeControlType")
                        .HasColumnType("integer");

                    b.Property<int>("AttributeControlTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.HasKey("Id");

                    b.ToTable("AddressAttributes", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Common.AddressAttributeValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressAttributeId")
                        .HasColumnType("bigint");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.HasKey("Id");

                    b.ToTable("AddressAttributeValues", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Common.GenericAttribute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedOrUpdatedDateUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("KeyGroup")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId", "KeyGroup");

                    b.ToTable("GenericAttributes", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Common.SearchTerm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Keyword")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SearchTerms", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(6000)
                        .HasColumnType("character varying(6000)");

                    b.HasKey("Id");

                    b.ToTable("Settings", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Directory.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AllowsBilling")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowsShipping")
                        .HasColumnType("boolean");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("NumericIsoCode")
                        .HasColumnType("integer");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<bool>("SubjectToVat")
                        .HasColumnType("boolean");

                    b.Property<string>("ThreeLetterIsoCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("TwoLetterIsoCode")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Directory.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("CustomFormatting")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DisplayLocale")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Rate")
                        .HasPrecision(12, 5)
                        .HasColumnType("numeric(12,5)");

                    b.Property<int>("RoundingType")
                        .HasColumnType("integer");

                    b.Property<int>("RoundingTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Currencies", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Directory.CurrencyStateProvince", b =>
                {
                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("StateProvinceId")
                        .HasColumnType("bigint");

                    b.HasKey("CurrencyId", "StateProvinceId");

                    b.HasIndex("StateProvinceId");

                    b.ToTable("CurrencyStateProvinces", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Directory.MeasureDimension", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Ratio")
                        .HasPrecision(12, 5)
                        .HasColumnType("numeric(12,5)");

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("MeasureDimensions", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Directory.MeasureWeight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Ratio")
                        .HasPrecision(12, 5)
                        .HasColumnType("numeric(12,5)");

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("MeasureWeights", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Directory.StateProvince", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("StateProvinces", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Forums.Forum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<long>("ForumGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("LastPostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastPostTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LastPostUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("LastTopicId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("NumPosts")
                        .HasColumnType("integer");

                    b.Property<int>("NumTopics")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ForumGroupId");

                    b.ToTable("Forums", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Forums.ForumGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ForumGroups", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Forums.ForumPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ForumTopicId")
                        .HasColumnType("bigint");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ForumTopicId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumPosts", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Forums.ForumPostVote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ForumPostId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsUp")
                        .HasColumnType("boolean");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ForumPostVotes", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Forums.ForumSubscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ForumId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("SubscriptionGuid")
                        .HasColumnType("uuid");

                    b.Property<long>("TopicId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ForumSubscriptions", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Forums.ForumTopic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ForumId")
                        .HasColumnType("bigint");

                    b.Property<int>("ForumTopicType")
                        .HasColumnType("integer");

                    b.Property<long>("LastPostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastPostTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LastPostUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("NumPosts")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<int>("TopicTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Views")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumTopics", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Forums.PrivateMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FromUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeletedByAuthor")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeletedByRecipient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ToUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("PrivateMessages", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Gdpr.GdprConsent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("DisplayDuringRegistration")
                        .HasColumnType("boolean");

                    b.Property<bool>("DisplayOnUserInfoPage")
                        .HasColumnType("boolean");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequiredMessage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GdprConsents", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Gdpr.GdprLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ConsentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequestDetails")
                        .HasColumnType("text");

                    b.Property<int>("RequestType")
                        .HasColumnType("integer");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserInfo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GdprLogs", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Localization.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DefaultCurrencyId")
                        .HasColumnType("bigint");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("FlagImageFileName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<bool>("Rtl")
                        .HasColumnType("boolean");

                    b.Property<string>("UniqueSeoCode")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.HasKey("Id");

                    b.ToTable("Languages", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Localization.LocaleStringResource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ResourceValue")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocaleStringResources", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Localization.LocalizedProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("LocaleKey")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("LocaleKeyGroup")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("LocaleValue")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("EntityId", "LocaleKey");

                    b.HasIndex("LocaleKeyGroup", "LanguageId");

                    b.ToTable("LocalizedProperties", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Logging.ActivityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ActivityLogTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityName")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("SubjectName")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.HasKey("Id");

                    b.ToTable("ActivityLogs", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Logging.ActivityLogType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("ActivityLogTypes", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Logging.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityName")
                        .HasColumnType("text");

                    b.Property<string>("FullMessage")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("LogLevel")
                        .HasColumnType("integer");

                    b.Property<int>("LogLevelId")
                        .HasColumnType("integer");

                    b.Property<string>("PageUrl")
                        .HasColumnType("text");

                    b.Property<string>("ReferrerUrl")
                        .HasColumnType("text");

                    b.Property<string>("ShortMessage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LogLevelId");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Media.Download", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<byte[]>("DownloadBinary")
                        .HasColumnType("bytea");

                    b.Property<Guid>("DownloadGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("text");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<string>("Filename")
                        .HasColumnType("text");

                    b.Property<bool>("IsNew")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseDownloadUrl")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Downloads", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Media.Picture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AltAttribute")
                        .HasColumnType("text");

                    b.Property<bool>("IsNew")
                        .HasColumnType("boolean");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("SeoFilename")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("TitleAttribute")
                        .HasColumnType("text");

                    b.Property<string>("VirtualPath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Pictures", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Media.PictureBinary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("BinaryData")
                        .HasColumnType("bytea");

                    b.Property<long>("PictureId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PictureId")
                        .IsUnique();

                    b.ToTable("PictureBinaries", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Messages.Campaign", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DontSendBeforeDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<long>("UserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Campaigns", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Messages.EmailAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("EnableSsl")
                        .HasColumnType("boolean");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<bool>("UseDefaultCredentials")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("EmailAccounts", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Messages.MessageTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AttachedDownloadId")
                        .HasColumnType("bigint");

                    b.Property<string>("BccEmailAddresses")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<int?>("DelayBeforeSend")
                        .HasColumnType("integer");

                    b.Property<int>("DelayPeriod")
                        .HasColumnType("integer");

                    b.Property<int>("DelayPeriodId")
                        .HasColumnType("integer");

                    b.Property<long>("EmailAccountId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.ToTable("MessageTemplates", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Messages.NewsLetterSubscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("NewsLetterSubscriptionGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("NewsLetterSubscriptions", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Messages.QueuedEmail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AttachedDownloadId")
                        .HasColumnType("bigint");

                    b.Property<string>("AttachmentFileName")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentFilePath")
                        .HasColumnType("text");

                    b.Property<string>("Bcc")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<string>("CC")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DontSendBeforeDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EmailAccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FromName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("PriorityId")
                        .HasColumnType("integer");

                    b.Property<string>("ReplyTo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ReplyToName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("SentOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SentTries")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("To")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ToName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("QueuedEmails", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.News.NewsComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CommentText")
                        .HasColumnType("text");

                    b.Property<string>("CommentTitle")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<long>("NewsItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("NewsComments", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.News.NewsItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AllowComments")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Full")
                        .HasColumnType("text");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("text");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("text");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Short")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NewsItems", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Polls.Poll", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AllowGuestsToVote")
                        .HasColumnType("boolean");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowOnHomepage")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("StartDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SystemKeyword")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Polls", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Polls.PollAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfVotes")
                        .HasColumnType("integer");

                    b.Property<long>("PollId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.ToTable("PollAnswers", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Polls.PollVotingRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PollAnswerId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PollAnswerId");

                    b.HasIndex("UserId");

                    b.ToTable("PollVotingRecords", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.ScheduleTasks.ScheduleTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastEnabledUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastEndUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastStartUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastSuccessUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<int>("Seconds")
                        .HasColumnType("integer");

                    b.Property<bool>("StopOnError")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ScheduleTasks", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Security.AclRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<long>("UserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("AclRecords", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Security.PermissionRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("PermissionRecords", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Security.PermissionRecordUserRole", b =>
                {
                    b.Property<long>("UserRoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionRecordId")
                        .HasColumnType("bigint");

                    b.HasKey("UserRoleId", "PermissionRecordId");

                    b.HasIndex("PermissionRecordId");

                    b.ToTable("PermissionRecordUserRoles", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Seo.UrlRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.HasKey("Id");

                    b.ToTable("UrlRecords", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Topics.Topic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AccessibleWhenPlatformClosed")
                        .HasColumnType("boolean");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IncludeInFooterColumn1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeInFooterColumn2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeInFooterColumn3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeInSitemap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeInTopMenu")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPasswordProtected")
                        .HasColumnType("boolean");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("text");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<bool>("SubjectToAcl")
                        .HasColumnType("boolean");

                    b.Property<string>("SystemName")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<long>("TopicTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TopicTemplateId");

                    b.ToTable("Topics", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Topics.TopicTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("ViewPath")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.HasKey("Id");

                    b.ToTable("TopicTemplates", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Users.ExternalAuthenticationRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ExternalDisplayIdentifier")
                        .HasColumnType("text");

                    b.Property<string>("ExternalIdentifier")
                        .HasColumnType("text");

                    b.Property<string>("OAuthAccessToken")
                        .HasColumnType("text");

                    b.Property<string>("OAuthToken")
                        .HasColumnType("text");

                    b.Property<string>("ProviderSystemName")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExternalAuthenticationRecord", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdminComment")
                        .HasColumnType("text");

                    b.Property<long>("AffiliateId")
                        .HasColumnType("bigint");

                    b.Property<long>("AvatarPictureId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BillingAddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CannotLoginUntilDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeviceCountLimit")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("EmailToRevalidate")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemAccount")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastActivityUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastIpAddress")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("RequireReLogin")
                        .HasColumnType("boolean");

                    b.Property<long?>("ShippingAddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("SystemName")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasFilter("\"IsDeleted\" = false");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Users.UserAddress", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("UserAddresses", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Users.UserAttribute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AttributeControlType")
                        .HasColumnType("integer");

                    b.Property<int>("AttributeControlTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.HasKey("Id");

                    b.ToTable("UserAttributes", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Users.UserAttributeValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<long>("UserAttributeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserAttributeId");

                    b.ToTable("UserAttributeValues", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Users.UserDevice", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "DeviceId");

                    b.HasIndex("DeviceId");

                    b.ToTable("UserDevices", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Users.UserMonitor", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("MonitorId")
                        .HasColumnType("bigint");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowInMenu")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "MonitorId");

                    b.HasIndex("MonitorId");

                    b.ToTable("UserMonitors", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Users.UserPassword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("PasswordFormat")
                        .HasColumnType("integer");

                    b.Property<long>("PasswordFormatId")
                        .HasColumnType("bigint");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPasswords", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EnablePasswordLifetime")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SystemName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Users.UserUserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "UserRoleId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserUserRoles", (string)null);
                });

            modelBuilder.Entity("Hub.Core.Domain.Blogs.BlogComment", b =>
                {
                    b.HasOne("Hub.Core.Domain.Blogs.BlogPost", null)
                        .WithMany()
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Core.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Blogs.BlogPost", b =>
                {
                    b.HasOne("Hub.Core.Domain.Localization.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.Command", b =>
                {
                    b.HasOne("Hub.Core.Domain.Clients.Device", null)
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.Device", b =>
                {
                    b.HasOne("Hub.Core.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.DeviceCredential", b =>
                {
                    b.HasOne("Hub.Core.Domain.Clients.Device", null)
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.DownloadTask", b =>
                {
                    b.HasOne("Hub.Core.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.Monitor", b =>
                {
                    b.HasOne("Hub.Core.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.Presentation", b =>
                {
                    b.HasOne("Hub.Core.Domain.Clients.Monitor", null)
                        .WithMany()
                        .HasForeignKey("MonitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Core.Domain.Clients.SensorWidget", null)
                        .WithMany()
                        .HasForeignKey("SensorWidgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.Sensor", b =>
                {
                    b.HasOne("Hub.Core.Domain.Clients.Device", null)
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.SensorRecord", b =>
                {
                    b.HasOne("Hub.Core.Domain.Clients.Sensor", null)
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.SensorWidget", b =>
                {
                    b.HasOne("Hub.Core.Domain.Clients.Sensor", null)
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hub.Core.Domain.Clients.Widget", null)
                        .WithMany()
                        .HasForeignKey("WidgetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.VideoSegment", b =>
                {
                    b.HasOne("Hub.Core.Domain.Clients.Sensor", null)
                        .WithMany()
                        .HasForeignKey("IpcamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.VideoSegmentBinary", b =>
                {
                    b.HasOne("Hub.Core.Domain.Clients.VideoSegment", null)
                        .WithOne()
                        .HasForeignKey("Hub.Core.Domain.Clients.VideoSegmentBinary", "VideoSegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Clients.Widget", b =>
                {
                    b.HasOne("Hub.Core.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Common.Address", b =>
                {
                    b.HasOne("Hub.Core.Domain.Directory.StateProvince", null)
                        .WithMany()
                        .HasForeignKey("StateProvinceId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Hub.Core.Domain.Directory.CurrencyStateProvince", b =>
                {
                    b.HasOne("Hub.Core.Domain.Directory.Currency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Core.Domain.Directory.StateProvince", null)
                        .WithMany()
                        .HasForeignKey("StateProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Forums.Forum", b =>
                {
                    b.HasOne("Hub.Core.Domain.Forums.ForumGroup", null)
                        .WithMany()
                        .HasForeignKey("ForumGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Forums.ForumPost", b =>
                {
                    b.HasOne("Hub.Core.Domain.Forums.ForumTopic", null)
                        .WithMany()
                        .HasForeignKey("ForumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Core.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Forums.ForumPostVote", b =>
                {
                    b.HasOne("Hub.Core.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Forums.ForumSubscription", b =>
                {
                    b.HasOne("Hub.Core.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Forums.ForumTopic", b =>
                {
                    b.HasOne("Hub.Core.Domain.Forums.Forum", null)
                        .WithMany()
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Core.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Forums.PrivateMessage", b =>
                {
                    b.HasOne("Hub.Core.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hub.Core.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Localization.LocaleStringResource", b =>
                {
                    b.HasOne("Hub.Core.Domain.Localization.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Localization.LocalizedProperty", b =>
                {
                    b.HasOne("Hub.Core.Domain.Localization.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Media.PictureBinary", b =>
                {
                    b.HasOne("Hub.Core.Domain.Media.Picture", null)
                        .WithOne()
                        .HasForeignKey("Hub.Core.Domain.Media.PictureBinary", "PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Messages.Campaign", b =>
                {
                    b.HasOne("Hub.Core.Domain.Users.UserRole", null)
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Polls.Poll", b =>
                {
                    b.HasOne("Hub.Core.Domain.Localization.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Polls.PollAnswer", b =>
                {
                    b.HasOne("Hub.Core.Domain.Polls.Poll", null)
                        .WithMany()
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Polls.PollVotingRecord", b =>
                {
                    b.HasOne("Hub.Core.Domain.Polls.PollAnswer", null)
                        .WithMany()
                        .HasForeignKey("PollAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Core.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Security.AclRecord", b =>
                {
                    b.HasOne("Hub.Core.Domain.Users.UserRole", null)
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Security.PermissionRecordUserRole", b =>
                {
                    b.HasOne("Hub.Core.Domain.Security.PermissionRecord", null)
                        .WithMany()
                        .HasForeignKey("PermissionRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Core.Domain.Users.UserRole", null)
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Topics.Topic", b =>
                {
                    b.HasOne("Hub.Core.Domain.Topics.TopicTemplate", null)
                        .WithMany()
                        .HasForeignKey("TopicTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Users.ExternalAuthenticationRecord", b =>
                {
                    b.HasOne("Hub.Core.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Users.UserAddress", b =>
                {
                    b.HasOne("Hub.Core.Domain.Common.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Core.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Users.UserAttributeValue", b =>
                {
                    b.HasOne("Hub.Core.Domain.Users.UserAttribute", null)
                        .WithMany()
                        .HasForeignKey("UserAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Users.UserDevice", b =>
                {
                    b.HasOne("Hub.Core.Domain.Clients.Device", null)
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hub.Core.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Users.UserMonitor", b =>
                {
                    b.HasOne("Hub.Core.Domain.Clients.Monitor", null)
                        .WithMany()
                        .HasForeignKey("MonitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Core.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Users.UserPassword", b =>
                {
                    b.HasOne("Hub.Core.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Core.Domain.Users.UserUserRole", b =>
                {
                    b.HasOne("Hub.Core.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Core.Domain.Users.UserRole", null)
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
