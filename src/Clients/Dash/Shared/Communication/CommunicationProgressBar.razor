@implements IDisposable

<div class="row">
   <div class="col-md-12">
      <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" ProgressBarStyle="ProgressBarStyle.Info"
                         Style=@("width:100%; height:3px; position: absolute; display:" + (inProgress ? "block" : "none;")) />
   </div>
</div>



@code {
   bool inProgress;

   [Inject] DataLoadProcess DataLoadProcess { get; set; }

   protected override void OnInitialized()
   {
      DataLoadProcess.LoadProcessStarting += OnLoadProcessStarting;
      DataLoadProcess.LoadProcessEnded += OnLoadProcessEnded;
   }


   public void OnLoadProcessStarting()
   {
      if(!inProgress)
      {
         inProgress = true;
         StateHasChanged();
      }
   }


   public async Task OnLoadProcessEnded()
   {
      inProgress = false;

      // small trick to avoid multi start in one logic load process
      //await Task.Delay(500);
      //if(!inProgress)

      StateHasChanged();
      await Task.CompletedTask;
   }


   public void Dispose()
   {
      DataLoadProcess.LoadProcessStarting -= OnLoadProcessStarting;
      DataLoadProcess.LoadProcessEnded -= OnLoadProcessEnded;
   }
}