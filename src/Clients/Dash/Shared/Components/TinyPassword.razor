<div class="input-group d-flex" @attributes=@Attributes>
   @if (showIcon == "visibility")
   {
      <RadzenPassword Name="@Name" @bind-Value:get=@Model.Password @bind-Value:set=@OnValueChanged Placeholder=@Placeholder style="width: 100%; display: block;" Disabled=@Disabled />
   }
   else
   {
      <RadzenTextBox Trim=true Name="@Name" @bind-Value:get=@Model.Password @bind-Value:set=@OnValueChanged Placeholder=@Placeholder style="width: 100%; display: block;" Disabled=@Disabled />
   }
   <div class="input-group-append position-relative">
      <span class="rz-button-box position-absolute" style="top: 8px; right: 10px; @(Disabled ?  "": "cursor: pointer;");" @onclick=@Toggle>
         <i class="rz-button-icon-left rzi">@showIcon</i>
      </span>
   </div>
</div>
@* <RadzenLengthValidator Component="@Name" Min=@MinLength Text="@T["Validation.Length.Min", T["Device.CreateOrEdit.Label.Password"], MinLength]" Style="position: absolute" />
<RadzenLengthValidator Component="@Name" Max=@MaxLength Text="@T["Validation.Length.Max", T["Device.CreateOrEdit.Label.Password"], MaxLength]" Style="position: absolute" /> *@

@code {
   [Parameter] public string Value { get; set; }
   [Parameter] public EventCallback<string> ValueChanged { get; set; }
   [Parameter] public string Placeholder { get; set; }
   [Parameter] public string Name { get; set; }
   [Parameter] public bool Disabled { get; set; }
   [Parameter] public int MinLength { get; set; }
   [Parameter] public int MaxLength { get; set; }
   [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> Attributes { get; set; }

   [Inject] NotificationService Notification { get; set; }

   private PasswordModel Model;
   private string showIcon;

   public TinyPassword()
   {
      Name = Guid.NewGuid().ToString("N");
      Model = new();
   }

   protected override void OnInitialized()
   {
      Placeholder ??= T["Device.CreateOrEdit.Password.Placeholder"];
      showIcon = "visibility";
   }

   private void Toggle(MouseEventArgs args)
   {
      if (!Disabled)
         showIcon = showIcon == "visibility" ? "visibility_off" : "visibility";
   }

   private async Task OnValueChanged(string password)
   {
      Value = Model.Password = password;
      await ValueChanged.InvokeAsync(Model.Password);
   }

   class PasswordModel
   {
      public string Password { get; set; }
   }
}
