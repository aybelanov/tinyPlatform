@using System.Text.Json
@inject IJSRuntime JSRuntime

<div @attributes=@Attributes>
   <div class="row">
      <div class="col">
         <div class="console-header align-items-center">
            @if (!string.IsNullOrEmpty(Title))
            {
               <h4 class="console-title">@Title</h4>
            }
            <RadzenButton Click=@OnClearClick Text="@T["Button.Clear"]" ButtonStyle="ButtonStyle.Light" />
         </div>
      </div>
   </div>
   <div class="row">
      <div class="col" style=@($"height: {Height}px; overflow: scroll")>
         @foreach (var message in messages)
         {
            <div class="console-message">
               <span class="console-message-time">@message.Date.ToString("HH:mm:ss.ff")</span>
               <span class="console-message-text">@message.Text</span>
            </div>
         }
      </div>
   </div>
</div>

@code {

   [Parameter] public string Title { get; set; }
   [Parameter] public int Capacity { get; set; } = 100;
   [Parameter] public int Height { get; set; }
   [Parameter] public bool Ascending { get; set; }

   [Parameter(CaptureUnmatchedValues = true)]
   public IDictionary<string, object> Attributes { get; set; }

   List<Message> messages = new List<Message>() { new Message() { Date = DateTime.Now, Text = "[no messages]" } };

   // protected override async Task OnAfterRenderAsync(bool firstRender)
   // {
   //    if (firstRender)
   //       return;

   //    await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('event-console').scrollTop = document.getElementById('event-console').scrollHeight");
   // }

   void OnClearClick()
   {
      Clear();
   }

   public void Clear()
   {
      messages.Clear();
      StateHasChanged();
   }

   public void Log(string message) => Log(new[] { message });

   public void Log(IEnumerable<string> newMessages)
   {
      foreach (var message in newMessages)
      {
         if (messages.Count >= Capacity)
            messages.RemoveAt(messages.Count - 1);

         if (Ascending)
         {
            messages.Add(new Message { Date = DateTime.Now, Text = message });
         }
         else
         {
            messages.Insert(0, new Message { Date = DateTime.Now, Text = message });
         }
      }

      StateHasChanged();
   }

   record Message
   {
      public DateTime Date { get; set; }
      public string Text { get; set; }
   }
}