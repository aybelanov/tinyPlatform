/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/geom/Geometry.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import BaseObject from"../Object.js";import{abstract}from"../util.js";import{compose as composeTransform,create as createTransform}from"../transform.js";import{createEmpty,createOrUpdateEmpty,getHeight,returnOrUpdate}from"../extent.js";import{get as getProjection,getTransform}from"../proj.js";import{memoizeOne}from"../functions.js";import{transform2D}from"./flat/transform.js";const tmpTransform=createTransform();class Geometry extends BaseObject{constructor(){super(),this.extent_=createEmpty(),this.extentRevision_=-1,this.simplifiedGeometryMaxMinSquaredTolerance=0,this.simplifiedGeometryRevision=0,this.simplifyTransformedInternal=memoizeOne((function(t,e,r){if(!r)return this.getSimplifiedGeometry(e);const s=this.clone();return s.applyTransform(r),s.getSimplifiedGeometry(e)}))}simplifyTransformed(t,e){return this.simplifyTransformedInternal(this.getRevision(),t,e)}clone(){return abstract()}closestPointXY(t,e,r,s){return abstract()}containsXY(t,e){const r=this.getClosestPoint([t,e]);return r[0]===t&&r[1]===e}getClosestPoint(t,e){return e=e||[NaN,NaN],this.closestPointXY(t[0],t[1],e,1/0),e}intersectsCoordinate(t){return this.containsXY(t[0],t[1])}computeExtent(t){return abstract()}getExtent(t){if(this.extentRevision_!=this.getRevision()){const t=this.computeExtent(this.extent_);(isNaN(t[0])||isNaN(t[1]))&&createOrUpdateEmpty(t),this.extentRevision_=this.getRevision()}return returnOrUpdate(this.extent_,t)}rotate(t,e){abstract()}scale(t,e,r){abstract()}simplify(t){return this.getSimplifiedGeometry(t*t)}getSimplifiedGeometry(t){return abstract()}getType(){return abstract()}applyTransform(t){abstract()}intersectsExtent(t){return abstract()}translate(t,e){abstract()}transform(t,e){const r=getProjection(t),s="tile-pixels"==r.getUnits()?function(t,s,n){const i=r.getExtent(),o=r.getWorldExtent(),a=getHeight(o)/getHeight(i);return composeTransform(tmpTransform,o[0],o[3],a,-a,0,0,0),transform2D(t,0,t.length,n,tmpTransform,s),getTransform(r,e)(t,s,n)}:getTransform(r,e);return this.applyTransform(s),this}}export default Geometry;
//# sourceMappingURL=/sm/bd7a9e0cfe9810b706421512f898c3f8a16d2fbe16084a9fec1b5be40411cc86.map