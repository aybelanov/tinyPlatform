/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/geom/Circle.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import SimpleGeometry from"./SimpleGeometry.js";import{createOrUpdate,forEachCorner,intersects}from"../extent.js";import{deflateCoordinate}from"./flat/deflate.js";import{rotate}from"./flat/transform.js";class Circle extends SimpleGeometry{constructor(t,e,s){super(),void 0!==s&&void 0===e?this.setFlatCoordinates(s,t):(e=e||0,this.setCenterAndRadius(t,e,s))}clone(){const t=new Circle(this.flatCoordinates.slice(),void 0,this.layout);return t.applyProperties(this),t}closestPointXY(t,e,s,i){const r=this.flatCoordinates,o=t-r[0],n=e-r[1],a=o*o+n*n;if(a<i){if(0===a)for(let t=0;t<this.stride;++t)s[t]=r[t];else{const t=this.getRadius()/Math.sqrt(a);s[0]=r[0]+t*o,s[1]=r[1]+t*n;for(let t=2;t<this.stride;++t)s[t]=r[t]}return s.length=this.stride,a}return i}containsXY(t,e){const s=this.flatCoordinates,i=t-s[0],r=e-s[1];return i*i+r*r<=this.getRadiusSquared_()}getCenter(){return this.flatCoordinates.slice(0,this.stride)}computeExtent(t){const e=this.flatCoordinates,s=e[this.stride]-e[0];return createOrUpdate(e[0]-s,e[1]-s,e[0]+s,e[1]+s,t)}getRadius(){return Math.sqrt(this.getRadiusSquared_())}getRadiusSquared_(){const t=this.flatCoordinates[this.stride]-this.flatCoordinates[0],e=this.flatCoordinates[this.stride+1]-this.flatCoordinates[1];return t*t+e*e}getType(){return"Circle"}intersectsExtent(t){const e=this.getExtent();if(intersects(t,e)){const e=this.getCenter();return t[0]<=e[0]&&t[2]>=e[0]||(t[1]<=e[1]&&t[3]>=e[1]||forEachCorner(t,this.intersectsCoordinate.bind(this)))}return!1}setCenter(t){const e=this.stride,s=this.flatCoordinates[e]-this.flatCoordinates[0],i=t.slice();i[e]=i[0]+s;for(let s=1;s<e;++s)i[e+s]=t[s];this.setFlatCoordinates(this.layout,i),this.changed()}setCenterAndRadius(t,e,s){this.setLayout(s,t,0),this.flatCoordinates||(this.flatCoordinates=[]);const i=this.flatCoordinates;let r=deflateCoordinate(i,0,t,this.stride);i[r++]=i[0]+e;for(let t=1,e=this.stride;t<e;++t)i[r++]=i[t];i.length=r,this.changed()}getCoordinates(){return null}setCoordinates(t,e){}setRadius(t){this.flatCoordinates[this.stride]=this.flatCoordinates[0]+t,this.changed()}rotate(t,e){const s=this.getCenter(),i=this.getStride();this.setCenter(rotate(s,0,s.length,i,t,e,s)),this.changed()}}Circle.prototype.transform;export default Circle;
//# sourceMappingURL=/sm/437a5c3a5c42b58bb108d843aa705a042fb4699b59d27595e9e0c9cecf2f2247.map