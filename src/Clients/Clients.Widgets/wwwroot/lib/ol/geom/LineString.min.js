/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/geom/LineString.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import SimpleGeometry from"./SimpleGeometry.js";import{assignClosestPoint,maxSquaredDelta}from"./flat/closest.js";import{closestSquaredDistanceXY}from"../extent.js";import{deflateCoordinates}from"./flat/deflate.js";import{douglasPeucker}from"./flat/simplify.js";import{extend}from"../array.js";import{forEach as forEachSegment}from"./flat/segments.js";import{inflateCoordinates}from"./flat/inflate.js";import{interpolatePoint,lineStringCoordinateAtM}from"./flat/interpolate.js";import{intersectsLineString}from"./flat/intersectsextent.js";import{lineStringLength}from"./flat/length.js";class LineString extends SimpleGeometry{constructor(t,i){super(),this.flatMidpoint_=null,this.flatMidpointRevision_=-1,this.maxDelta_=-1,this.maxDeltaRevision_=-1,void 0===i||Array.isArray(t[0])?this.setCoordinates(t,i):this.setFlatCoordinates(i,t)}appendCoordinate(t){this.flatCoordinates?extend(this.flatCoordinates,t):this.flatCoordinates=t.slice(),this.changed()}clone(){const t=new LineString(this.flatCoordinates.slice(),this.layout);return t.applyProperties(this),t}closestPointXY(t,i,e,s){return s<closestSquaredDistanceXY(this.getExtent(),t,i)?s:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(maxSquaredDelta(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),assignClosestPoint(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,this.maxDelta_,!1,t,i,e,s))}forEachSegment(t){return forEachSegment(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t)}getCoordinateAtM(t,i){return"XYM"!=this.layout&&"XYZM"!=this.layout?null:(i=void 0!==i&&i,lineStringCoordinateAtM(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,i))}getCoordinates(){return inflateCoordinates(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)}getCoordinateAt(t,i){return interpolatePoint(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,i,this.stride)}getLength(){return lineStringLength(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)}getFlatMidpoint(){return this.flatMidpointRevision_!=this.getRevision()&&(this.flatMidpoint_=this.getCoordinateAt(.5,this.flatMidpoint_),this.flatMidpointRevision_=this.getRevision()),this.flatMidpoint_}getSimplifiedGeometryInternal(t){const i=[];return i.length=douglasPeucker(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,i,0),new LineString(i,"XY")}getType(){return"LineString"}intersectsExtent(t){return intersectsLineString(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t)}setCoordinates(t,i){this.setLayout(i,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=deflateCoordinates(this.flatCoordinates,0,t,this.stride),this.changed()}}export default LineString;
//# sourceMappingURL=/sm/3c6c9081c06777fa1a39adc0a2f2c22c56a4e6606279b428d467c53343144c50.map