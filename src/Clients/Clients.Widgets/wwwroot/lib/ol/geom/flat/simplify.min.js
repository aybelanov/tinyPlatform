/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/geom/flat/simplify.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{squaredDistance,squaredSegmentDistance}from"../../math.js";export function simplifyLineString(t,n,e,r,o,u,s){return s=void 0!==s?s:[],u||(e=radialDistance(t,n,e,r,o,s,0),t=s,n=0,r=2),s.length=douglasPeucker(t,n,e,r,o,s,0),s}export function douglasPeucker(t,n,e,r,o,u,s){const a=(e-n)/r;if(a<3){for(;n<e;n+=r)u[s++]=t[n],u[s++]=t[n+1];return s}const i=new Array(a);i[0]=1,i[a-1]=1;const c=[n,e-r];let l=0;for(;c.length>0;){const e=c.pop(),u=c.pop();let s=0;const a=t[u],p=t[u+1],f=t[e],g=t[e+1];for(let n=u+r;n<e;n+=r){const e=t[n],r=t[n+1],o=squaredSegmentDistance(e,r,a,p,f,g);o>s&&(l=n,s=o)}s>o&&(i[(l-n)/r]=1,u+r<l&&c.push(u,l),l+r<e&&c.push(l,e))}for(let e=0;e<a;++e)i[e]&&(u[s++]=t[n+e*r],u[s++]=t[n+e*r+1]);return s}export function douglasPeuckerArray(t,n,e,r,o,u,s,a){for(let i=0,c=e.length;i<c;++i){const c=e[i];s=douglasPeucker(t,n,c,r,o,u,s),a.push(s),n=c}return s}export function douglasPeuckerMultiArray(t,n,e,r,o,u,s,a){for(let i=0,c=e.length;i<c;++i){const c=e[i],l=[];s=douglasPeuckerArray(t,n,c,r,o,u,s,l),a.push(l),n=c[c.length-1]}return s}export function radialDistance(t,n,e,r,o,u,s){if(e<=n+r){for(;n<e;n+=r)u[s++]=t[n],u[s++]=t[n+1];return s}let a=t[n],i=t[n+1];u[s++]=a,u[s++]=i;let c=a,l=i;for(n+=r;n<e;n+=r)c=t[n],l=t[n+1],squaredDistance(a,i,c,l)>o&&(u[s++]=c,u[s++]=l,a=c,i=l);return c==a&&l==i||(u[s++]=c,u[s++]=l),s}export function snap(t,n){return n*Math.round(t/n)}export function quantize(t,n,e,r,o,u,s){if(n==e)return s;let a,i,c=snap(t[n],o),l=snap(t[n+1],o);n+=r,u[s++]=c,u[s++]=l;do{if(a=snap(t[n],o),i=snap(t[n+1],o),(n+=r)==e)return u[s++]=a,u[s++]=i,s}while(a==c&&i==l);for(;n<e;){const e=snap(t[n],o),p=snap(t[n+1],o);if(n+=r,e==a&&p==i)continue;const f=a-c,g=i-l,h=e-c,d=p-l;f*d==g*h&&(f<0&&h<f||f==h||f>0&&h>f)&&(g<0&&d<g||g==d||g>0&&d>g)?(a=e,i=p):(u[s++]=a,u[s++]=i,c=a,l=i,a=e,i=p)}return u[s++]=a,u[s++]=i,s}export function quantizeArray(t,n,e,r,o,u,s,a){for(let i=0,c=e.length;i<c;++i){const c=e[i];s=quantize(t,n,c,r,o,u,s),a.push(s),n=c}return s}export function quantizeMultiArray(t,n,e,r,o,u,s,a){for(let i=0,c=e.length;i<c;++i){const c=e[i],l=[];s=quantizeArray(t,n,c,r,o,u,s,l),a.push(l),n=c[c.length-1]}return s}
//# sourceMappingURL=/sm/03aeb062ab7f46521e2d53497c767c8cccbd74b0e2abc895e6549456cf94b862.map