/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/geom/flat/geodesic.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{get as getProjection,getTransform}from"../../proj.js";import{squaredSegmentDistance,toDegrees,toRadians}from"../../math.js";function line(t,n,o){const e=[];let a=t(0),r=t(1),s=n(a),i=n(r);const c=[r,a],p=[i,s],h=[1,0],u={};let g,f,M,m,d,l,R=1e5;for(;--R>0&&h.length>0;)M=h.pop(),a=c.pop(),s=p.pop(),l=M.toString(),l in u||(e.push(s[0],s[1]),u[l]=!0),m=h.pop(),r=c.pop(),i=p.pop(),d=(M+m)/2,g=t(d),f=n(g),squaredSegmentDistance(f[0],f[1],s[0],s[1],i[0],i[1])<o?(e.push(i[0],i[1]),l=m.toString(),u[l]=!0):(h.push(m,d,d,M),p.push(i,f,f,s),c.push(r,g,g,a));return e}export function greatCircleArc(t,n,o,e,a,r){const s=getProjection("EPSG:4326"),i=Math.cos(toRadians(n)),c=Math.sin(toRadians(n)),p=Math.cos(toRadians(e)),h=Math.sin(toRadians(e)),u=Math.cos(toRadians(o-t)),g=Math.sin(toRadians(o-t)),f=c*h+i*p*u;return line((function(n){if(1<=f)return[o,e];const a=n*Math.acos(f),r=Math.cos(a),s=Math.sin(a),M=g*p,m=i*h-c*p*u,d=Math.atan2(M,m),l=Math.asin(c*r+i*s*Math.cos(d)),R=toRadians(t)+Math.atan2(Math.sin(d)*s*i,r-c*Math.sin(l));return[toDegrees(R),toDegrees(l)]}),getTransform(s,a),r)}export function meridian(t,n,o,e,a){const r=getProjection("EPSG:4326");return line((function(e){return[t,n+(o-n)*e]}),getTransform(r,e),a)}export function parallel(t,n,o,e,a){const r=getProjection("EPSG:4326");return line((function(e){return[n+(o-n)*e,t]}),getTransform(r,e),a)}
//# sourceMappingURL=/sm/ee74605448dfad59463bad5b7d3c9f26b805209429e4cb43c5d5319821f10d78.map