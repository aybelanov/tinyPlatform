/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/geom/MultiLineString.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import LineString from"./LineString.js";import SimpleGeometry from"./SimpleGeometry.js";import{arrayMaxSquaredDelta,assignClosestArrayPoint}from"./flat/closest.js";import{closestSquaredDistanceXY}from"../extent.js";import{deflateCoordinatesArray}from"./flat/deflate.js";import{douglasPeuckerArray}from"./flat/simplify.js";import{extend}from"../array.js";import{inflateCoordinatesArray}from"./flat/inflate.js";import{interpolatePoint,lineStringsCoordinateAtM}from"./flat/interpolate.js";import{intersectsLineStringArray}from"./flat/intersectsextent.js";class MultiLineString extends SimpleGeometry{constructor(t,e,i){if(super(),this.ends_=[],this.maxDelta_=-1,this.maxDeltaRevision_=-1,Array.isArray(t[0]))this.setCoordinates(t,e);else if(void 0!==e&&i)this.setFlatCoordinates(e,t),this.ends_=i;else{let e=this.getLayout();const i=t,s=[],n=[];for(let t=0,r=i.length;t<r;++t){const r=i[t];0===t&&(e=r.getLayout()),extend(s,r.getFlatCoordinates()),n.push(s.length)}this.setFlatCoordinates(e,s),this.ends_=n}}appendLineString(t){this.flatCoordinates?extend(this.flatCoordinates,t.getFlatCoordinates().slice()):this.flatCoordinates=t.getFlatCoordinates().slice(),this.ends_.push(this.flatCoordinates.length),this.changed()}clone(){const t=new MultiLineString(this.flatCoordinates.slice(),this.layout,this.ends_.slice());return t.applyProperties(this),t}closestPointXY(t,e,i,s){return s<closestSquaredDistanceXY(this.getExtent(),t,e)?s:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates,0,this.ends_,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),assignClosestArrayPoint(this.flatCoordinates,0,this.ends_,this.stride,this.maxDelta_,!1,t,e,i,s))}getCoordinateAtM(t,e,i){return"XYM"!=this.layout&&"XYZM"!=this.layout||0===this.flatCoordinates.length?null:(e=void 0!==e&&e,i=void 0!==i&&i,lineStringsCoordinateAtM(this.flatCoordinates,0,this.ends_,this.stride,t,e,i))}getCoordinates(){return inflateCoordinatesArray(this.flatCoordinates,0,this.ends_,this.stride)}getEnds(){return this.ends_}getLineString(t){return t<0||this.ends_.length<=t?null:new LineString(this.flatCoordinates.slice(0===t?0:this.ends_[t-1],this.ends_[t]),this.layout)}getLineStrings(){const t=this.flatCoordinates,e=this.ends_,i=this.layout,s=[];let n=0;for(let r=0,o=e.length;r<o;++r){const o=e[r],a=new LineString(t.slice(n,o),i);s.push(a),n=o}return s}getFlatMidpoints(){const t=[],e=this.flatCoordinates;let i=0;const s=this.ends_,n=this.stride;for(let r=0,o=s.length;r<o;++r){const o=s[r],a=interpolatePoint(e,i,o,n,.5);extend(t,a),i=o}return t}getSimplifiedGeometryInternal(t){const e=[],i=[];return e.length=douglasPeuckerArray(this.flatCoordinates,0,this.ends_,this.stride,t,e,0,i),new MultiLineString(e,"XY",i)}getType(){return"MultiLineString"}intersectsExtent(t){return intersectsLineStringArray(this.flatCoordinates,0,this.ends_,this.stride,t)}setCoordinates(t,e){this.setLayout(e,t,2),this.flatCoordinates||(this.flatCoordinates=[]);const i=deflateCoordinatesArray(this.flatCoordinates,0,t,this.stride,this.ends_);this.flatCoordinates.length=0===i.length?0:i[i.length-1],this.changed()}}export default MultiLineString;
//# sourceMappingURL=/sm/fb84630c571461dcccb98e3eaeafd444e9318b4b047d04d0f869c7c6c1c6a7e1.map