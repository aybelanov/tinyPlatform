/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/renderer/webgl/PointsLayer.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import BaseVector from"../../layer/BaseVector.js";import VectorEventType from"../../source/VectorEventType.js";import ViewHint from"../../ViewHint.js";import WebGLArrayBuffer from"../../webgl/Buffer.js";import WebGLLayerRenderer from"./Layer.js";import WebGLRenderTarget from"../../webgl/RenderTarget.js";import{ARRAY_BUFFER,DYNAMIC_DRAW,ELEMENT_ARRAY_BUFFER}from"../../webgl.js";import{AttributeType,DefaultUniform}from"../../webgl/Helper.js";import{WebGLWorkerMessageType}from"../../render/webgl/constants.js";import{apply as applyTransform,create as createTransform,makeInverse as makeInverseTransform,multiply as multiplyTransform,translate as translateTransform}from"../../transform.js";import{assert}from"../../asserts.js";import{buffer,createEmpty,equals,getWidth}from"../../extent.js";import{colorDecodeId,colorEncodeId}from"../../render/webgl/utils.js";import{create as createWebGLWorker}from"../../worker/webgl.js";import{getUid}from"../../util.js";import{listen,unlistenByKey}from"../../events.js";class WebGLPointsLayerRenderer extends WebGLLayerRenderer{constructor(e,t){const r=t.uniforms||{},s=createTransform();r[DefaultUniform.PROJECTION_MATRIX]=s,super(e,{uniforms:r,postProcesses:t.postProcesses}),this.sourceRevision_=-1,this.verticesBuffer_=new WebGLArrayBuffer(ARRAY_BUFFER,DYNAMIC_DRAW),this.indicesBuffer_=new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER,DYNAMIC_DRAW),this.vertexShader_=t.vertexShader,this.fragmentShader_=t.fragmentShader,this.program_,this.hitDetectionEnabled_=t.hitDetectionEnabled??!0;const i=t.attributes?t.attributes.map((function(e){return{name:"a_"+e.name,size:1,type:AttributeType.FLOAT}})):[];this.attributes=[{name:"a_position",size:2,type:AttributeType.FLOAT},{name:"a_index",size:1,type:AttributeType.FLOAT}],this.hitDetectionEnabled_&&(this.attributes.push({name:"a_hitColor",size:4,type:AttributeType.FLOAT}),this.attributes.push({name:"a_featureUid",size:1,type:AttributeType.FLOAT})),this.attributes.push(...i),this.customAttributes=t.attributes?t.attributes:[],this.previousExtent_=createEmpty(),this.currentTransform_=s,this.renderTransform_=createTransform(),this.invertRenderTransform_=createTransform(),this.renderInstructions_=new Float32Array(0),this.hitRenderTarget_,this.lastSentId=0,this.worker_=createWebGLWorker(),this.worker_.addEventListener("message",(e=>{const t=e.data;if(t.type===WebGLWorkerMessageType.GENERATE_POINT_BUFFERS){const r=t.projectionTransform;this.verticesBuffer_.fromArrayBuffer(t.vertexBuffer),this.helper.flushBufferData(this.verticesBuffer_),this.indicesBuffer_.fromArrayBuffer(t.indexBuffer),this.helper.flushBufferData(this.indicesBuffer_),this.renderTransform_=r,makeInverseTransform(this.invertRenderTransform_,this.renderTransform_),this.renderInstructions_=new Float32Array(e.data.renderInstructions),t.id===this.lastSentId&&(this.ready=!0),this.getLayer().changed()}})),this.featureCache_={},this.featureCount_=0;const n=this.getLayer().getSource();this.sourceListenKeys_=[listen(n,VectorEventType.ADDFEATURE,this.handleSourceFeatureAdded_,this),listen(n,VectorEventType.CHANGEFEATURE,this.handleSourceFeatureChanged_,this),listen(n,VectorEventType.REMOVEFEATURE,this.handleSourceFeatureDelete_,this),listen(n,VectorEventType.CLEAR,this.handleSourceFeatureClear_,this)],n.forEachFeature((e=>{this.featureCache_[getUid(e)]={feature:e,properties:e.getProperties(),geometry:e.getGeometry()},this.featureCount_++}))}afterHelperCreated(){this.program_=this.helper.getProgram(this.fragmentShader_,this.vertexShader_),this.hitDetectionEnabled_&&(this.hitRenderTarget_=new WebGLRenderTarget(this.helper))}handleSourceFeatureAdded_(e){const t=e.feature;this.featureCache_[getUid(t)]={feature:t,properties:t.getProperties(),geometry:t.getGeometry()},this.featureCount_++}handleSourceFeatureChanged_(e){const t=e.feature;this.featureCache_[getUid(t)]={feature:t,properties:t.getProperties(),geometry:t.getGeometry()}}handleSourceFeatureDelete_(e){const t=e.feature;delete this.featureCache_[getUid(t)],this.featureCount_--}handleSourceFeatureClear_(){this.featureCache_={},this.featureCount_=0}renderFrame(e){const t=this.helper.getGL();this.preRender(t,e);const[r,s,i]=this.getWorldParameters_(e);this.renderWorlds(e,!1,r,s,i),this.helper.finalizeDraw(e,this.dispatchPreComposeEvent,this.dispatchPostComposeEvent);const n=this.helper.getCanvas();return this.hitDetectionEnabled_&&(this.renderWorlds(e,!0,r,s,i),this.hitRenderTarget_.clearCachedData()),this.postRender(t,e),n}getWorldParameters_(e){const t=e.viewState.projection,r=this.getLayer().getSource().getWrapX()&&t.canWrapX(),s=t.getExtent(),i=e.extent,n=r?getWidth(s):null,a=r?Math.ceil((i[2]-s[2])/n)+1:1;return[r?Math.floor((i[0]-s[0])/n):0,a,n]}prepareFrameInternal(e){const t=this.getLayer(),r=t.getSource(),s=e.viewState,i=!e.viewHints[ViewHint.ANIMATING]&&!e.viewHints[ViewHint.INTERACTING],n=!equals(this.previousExtent_,e.extent),a=this.sourceRevision_<r.getRevision();if(a&&(this.sourceRevision_=r.getRevision()),i&&(n||a)){const i=s.projection,n=s.resolution,a=t instanceof BaseVector?t.getRenderBuffer():0,o=buffer(e.extent,a*n);r.loadFeatures(o,n,i),this.rebuildBuffers_(e),this.previousExtent_=e.extent.slice()}return this.helper.useProgram(this.program_,e),this.helper.prepareDraw(e),this.helper.bindBuffer(this.verticesBuffer_),this.helper.bindBuffer(this.indicesBuffer_),this.helper.enableAttributes(this.attributes),!0}rebuildBuffers_(e){const t=createTransform();this.helper.makeProjectionTransform(e,t);const r=(this.hitDetectionEnabled_?7:2)+this.customAttributes.length,s=r*this.featureCount_;let i,n;this.renderInstructions_&&this.renderInstructions_.length===s||(this.renderInstructions_=new Float32Array(s));const a=[],o=[];let h=-1;for(const e in this.featureCache_)if(i=this.featureCache_[e],n=i.geometry,n&&"Point"===n.getType()){if(a[0]=n.getFlatCoordinates()[0],a[1]=n.getFlatCoordinates()[1],applyTransform(t,a),this.renderInstructions_[++h]=a[0],this.renderInstructions_[++h]=a[1],this.hitDetectionEnabled_){const t=colorEncodeId(h+5,o);this.renderInstructions_[++h]=t[0],this.renderInstructions_[++h]=t[1],this.renderInstructions_[++h]=t[2],this.renderInstructions_[++h]=t[3],this.renderInstructions_[++h]=Number(e)}for(let e=0;e<this.customAttributes.length;e++){const t=this.customAttributes[e].callback(i.feature,i.properties);this.renderInstructions_[++h]=t}}const u={id:++this.lastSentId,type:WebGLWorkerMessageType.GENERATE_POINT_BUFFERS,renderInstructions:this.renderInstructions_.buffer,customAttributesSize:r-2};u.projectionTransform=t,this.ready=!1,this.worker_.postMessage(u,[this.renderInstructions_.buffer]),this.renderInstructions_=null}forEachFeatureAtCoordinate(e,t,r,s,i){if(assert(this.hitDetectionEnabled_,"`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has not been enabled. This is done by providing adequate shaders using the `hitVertexShader` and `hitFragmentShader` properties of `WebGLPointsLayerRenderer`"),!this.renderInstructions_||!this.hitDetectionEnabled_)return;const n=applyTransform(t.coordinateToPixelTransform,e.slice()),a=this.hitRenderTarget_.readPixel(n[0]/2,n[1]/2),o=[a[0]/255,a[1]/255,a[2]/255,a[3]/255],h=colorDecodeId(o),u=this.renderInstructions_[h],f=Math.floor(u).toString(),c=this.getLayer().getSource().getFeatureByUid(f);return c?s(c,this.getLayer(),null):void 0}renderWorlds(e,t,r,s,i){let n=r;this.helper.useProgram(this.program_,e),t&&(this.hitRenderTarget_.setSize([Math.floor(e.size[0]/2),Math.floor(e.size[1]/2)]),this.helper.prepareDrawToRenderTarget(e,this.hitRenderTarget_,!0)),this.helper.bindBuffer(this.verticesBuffer_),this.helper.bindBuffer(this.indicesBuffer_),this.helper.enableAttributes(this.attributes);do{this.helper.makeProjectionTransform(e,this.currentTransform_),translateTransform(this.currentTransform_,n*i,0),multiplyTransform(this.currentTransform_,this.invertRenderTransform_),this.helper.applyUniforms(e),this.helper.applyHitDetectionUniform(t);const r=this.indicesBuffer_.getSize();this.helper.drawElements(0,r)}while(++n<s)}disposeInternal(){this.worker_.terminate(),this.layer_=null,this.sourceListenKeys_.forEach((function(e){unlistenByKey(e)})),this.sourceListenKeys_=null,super.disposeInternal()}}export default WebGLPointsLayerRenderer;
//# sourceMappingURL=/sm/4813cc00ede631113ef81ffcfd2427f28cedf71b3f7a38153269db55521c14d3.map