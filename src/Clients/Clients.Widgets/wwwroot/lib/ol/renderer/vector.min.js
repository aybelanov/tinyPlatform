/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/renderer/vector.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import ImageState from"../ImageState.js";import{getUid}from"../util.js";const SIMPLIFY_TOLERANCE=.5,GEOMETRY_RENDERERS={Point:renderPointGeometry,LineString:renderLineStringGeometry,Polygon:renderPolygonGeometry,MultiPoint:renderMultiPointGeometry,MultiLineString:renderMultiLineStringGeometry,MultiPolygon:renderMultiPolygonGeometry,GeometryCollection:renderGeometryCollectionGeometry,Circle:renderCircleGeometry};export function defaultOrder(e,t){return parseInt(getUid(e),10)-parseInt(getUid(t),10)}export function getSquaredTolerance(e,t){const n=getTolerance(e,t);return n*n}export function getTolerance(e,t){return SIMPLIFY_TOLERANCE*e/t}function renderCircleGeometry(e,t,n,r,o){const i=n.getFill(),g=n.getStroke();if(i||g){const o=e.getBuilder(n.getZIndex(),"Circle");o.setFillStrokeStyle(i,g),o.drawCircle(t,r)}const l=n.getText();if(l&&l.getText()){const i=(o||e).getBuilder(n.getZIndex(),"Text");i.setTextStyle(l),i.drawText(t,r)}}export function renderFeature(e,t,n,r,o,i,g){let l=!1;const d=n.getImage();if(d){const e=d.getImageState();e==ImageState.LOADED||e==ImageState.ERROR?d.unlistenImageChange(o):(e==ImageState.IDLE&&d.load(),d.listenImageChange(o),l=!0)}return renderFeatureInternal(e,t,n,r,i,g),l}function renderFeatureInternal(e,t,n,r,o,i){const g=n.getGeometryFunction()(t);if(!g)return;const l=g.simplifyTransformed(r,o);if(n.getRenderer())renderGeometry(e,l,n,t);else{(0,GEOMETRY_RENDERERS[l.getType()])(e,l,n,t,i)}}function renderGeometry(e,t,n,r){if("GeometryCollection"==t.getType()){const o=t.getGeometries();for(let t=0,i=o.length;t<i;++t)renderGeometry(e,o[t],n,r);return}e.getBuilder(n.getZIndex(),"Default").drawCustom(t,r,n.getRenderer(),n.getHitDetectionRenderer())}function renderGeometryCollectionGeometry(e,t,n,r,o){const i=t.getGeometriesArray();let g,l;for(g=0,l=i.length;g<l;++g){(0,GEOMETRY_RENDERERS[i[g].getType()])(e,i[g],n,r,o)}}function renderLineStringGeometry(e,t,n,r,o){const i=n.getStroke();if(i){const o=e.getBuilder(n.getZIndex(),"LineString");o.setFillStrokeStyle(null,i),o.drawLineString(t,r)}const g=n.getText();if(g&&g.getText()){const i=(o||e).getBuilder(n.getZIndex(),"Text");i.setTextStyle(g),i.drawText(t,r)}}function renderMultiLineStringGeometry(e,t,n,r,o){const i=n.getStroke();if(i){const o=e.getBuilder(n.getZIndex(),"LineString");o.setFillStrokeStyle(null,i),o.drawMultiLineString(t,r)}const g=n.getText();if(g&&g.getText()){const i=(o||e).getBuilder(n.getZIndex(),"Text");i.setTextStyle(g),i.drawText(t,r)}}function renderMultiPolygonGeometry(e,t,n,r,o){const i=n.getFill(),g=n.getStroke();if(g||i){const o=e.getBuilder(n.getZIndex(),"Polygon");o.setFillStrokeStyle(i,g),o.drawMultiPolygon(t,r)}const l=n.getText();if(l&&l.getText()){const i=(o||e).getBuilder(n.getZIndex(),"Text");i.setTextStyle(l),i.drawText(t,r)}}function renderPointGeometry(e,t,n,r,o){const i=n.getImage(),g=n.getText();let l;if(i){if(i.getImageState()!=ImageState.LOADED)return;let d=e;if(o){const a=i.getDeclutterMode();if("none"!==a)if(d=o,"obstacle"===a){const o=e.getBuilder(n.getZIndex(),"Image");o.setImageStyle(i,l),o.drawPoint(t,r)}else g&&g.getText()&&(l={})}const a=d.getBuilder(n.getZIndex(),"Image");a.setImageStyle(i,l),a.drawPoint(t,r)}if(g&&g.getText()){let i=e;o&&(i=o);const d=i.getBuilder(n.getZIndex(),"Text");d.setTextStyle(g,l),d.drawText(t,r)}}function renderMultiPointGeometry(e,t,n,r,o){const i=n.getImage(),g=n.getText();let l;if(i){if(i.getImageState()!=ImageState.LOADED)return;let d=e;if(o){const a=i.getDeclutterMode();if("none"!==a)if(d=o,"obstacle"===a){const o=e.getBuilder(n.getZIndex(),"Image");o.setImageStyle(i,l),o.drawMultiPoint(t,r)}else g&&g.getText()&&(l={})}const a=d.getBuilder(n.getZIndex(),"Image");a.setImageStyle(i,l),a.drawMultiPoint(t,r)}if(g&&g.getText()){let i=e;o&&(i=o);const d=i.getBuilder(n.getZIndex(),"Text");d.setTextStyle(g,l),d.drawText(t,r)}}function renderPolygonGeometry(e,t,n,r,o){const i=n.getFill(),g=n.getStroke();if(i||g){const o=e.getBuilder(n.getZIndex(),"Polygon");o.setFillStrokeStyle(i,g),o.drawPolygon(t,r)}const l=n.getText();if(l&&l.getText()){const i=(o||e).getBuilder(n.getZIndex(),"Text");i.setTextStyle(l),i.drawText(t,r)}}
//# sourceMappingURL=/sm/968e746cfdeda78c0dcae6934abecdbf6241d09e4c47ace3977956ad9bb31945.map