/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/format/MVT.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import FeatureFormat,{transformGeometryWithOptions}from"./Feature.js";import LineString from"../geom/LineString.js";import MultiLineString from"../geom/MultiLineString.js";import MultiPoint from"../geom/MultiPoint.js";import MultiPolygon from"../geom/MultiPolygon.js";import PBF from"pbf";import Point from"../geom/Point.js";import Polygon from"../geom/Polygon.js";import Projection from"../proj/Projection.js";import RenderFeature from"../render/Feature.js";import{get}from"../proj.js";import{inflateEnds}from"../geom/flat/orient.js";class MVT extends FeatureFormat{constructor(e){super(),e=e||{},this.dataProjection=new Projection({code:"",units:"tile-pixels"}),this.featureClass_=e.featureClass?e.featureClass:RenderFeature,this.geometryName_=e.geometryName,this.layerName_=e.layerName?e.layerName:"layer",this.layers_=e.layers?e.layers:null,this.idProperty_=e.idProperty,this.supportedMediaTypes=["application/vnd.mapbox-vector-tile","application/x-protobuf"]}readRawGeometry_(e,t,r,o){e.pos=t.geometry;const n=e.readVarint()+e.pos;let i=1,a=0,s=0,l=0,u=0,d=0;for(;e.pos<n;){if(!a){const t=e.readVarint();i=7&t,a=t>>3}if(a--,1===i||2===i)s+=e.readSVarint(),l+=e.readSVarint(),1===i&&u>d&&(o.push(u),d=u),r.push(s,l),u+=2;else{if(7!==i)throw new Error("Invalid command found in the PBF");u>d&&(r.push(r[d],r[d+1]),u+=2)}}u>d&&(o.push(u),d=u)}createFeature_(e,t,r){const o=t.type;if(0===o)return null;let n;const i=t.properties;let a;this.idProperty_?(a=i[this.idProperty_],delete i[this.idProperty_]):a=t.id,i[this.layerName_]=t.layer.name;const s=[],l=[];this.readRawGeometry_(e,t,s,l);const u=getGeometryType(o,l.length);if(this.featureClass_===RenderFeature)n=new this.featureClass_(u,s,l,i,a),n.transform(r.dataProjection);else{let e;if("Polygon"==u){const t=inflateEnds(s,l);e=t.length>1?new MultiPolygon(s,"XY",t):new Polygon(s,"XY",l)}else e="Point"===u?new Point(s,"XY"):"LineString"===u?new LineString(s,"XY"):"MultiPoint"===u?new MultiPoint(s,"XY"):"MultiLineString"===u?new MultiLineString(s,"XY",l):null;n=new(0,this.featureClass_),this.geometryName_&&n.setGeometryName(this.geometryName_);const t=transformGeometryWithOptions(e,!1,r);n.setGeometry(t),void 0!==a&&n.setId(a),n.setProperties(i,!0)}return n}getType(){return"arraybuffer"}readFeatures(e,t){const r=this.layers_;t=this.adaptOptions(t);const o=get(t.dataProjection);o.setWorldExtent(t.extent),t.dataProjection=o;const n=new PBF(e),i=n.readFields(layersPBFReader,{}),a=[];for(const e in i){if(r&&!r.includes(e))continue;const s=i[e],l=s?[0,0,s.extent,s.extent]:null;o.setExtent(l);for(let e=0,r=s.length;e<r;++e){const r=readRawFeature(n,s,e),o=this.createFeature_(n,r,t);null!==o&&a.push(o)}}return a}readProjection(e){return this.dataProjection}setLayers(e){this.layers_=e}}function layersPBFReader(e,t,r){if(3===e){const e={keys:[],values:[],features:[]},o=r.readVarint()+r.pos;r.readFields(layerPBFReader,e,o),e.length=e.features.length,e.length&&(t[e.name]=e)}}function layerPBFReader(e,t,r){if(15===e)t.version=r.readVarint();else if(1===e)t.name=r.readString();else if(5===e)t.extent=r.readVarint();else if(2===e)t.features.push(r.pos);else if(3===e)t.keys.push(r.readString());else if(4===e){let o=null;const n=r.readVarint()+r.pos;for(;r.pos<n;)o=1===(e=r.readVarint()>>3)?r.readString():2===e?r.readFloat():3===e?r.readDouble():4===e?r.readVarint64():5===e?r.readVarint():6===e?r.readSVarint():7===e?r.readBoolean():null;t.values.push(o)}}function featurePBFReader(e,t,r){if(1==e)t.id=r.readVarint();else if(2==e){const e=r.readVarint()+r.pos;for(;r.pos<e;){const e=t.layer.keys[r.readVarint()],o=t.layer.values[r.readVarint()];t.properties[e]=o}}else 3==e?t.type=r.readVarint():4==e&&(t.geometry=r.pos)}function readRawFeature(e,t,r){e.pos=t.features[r];const o=e.readVarint()+e.pos,n={layer:t,type:0,properties:{}};return e.readFields(featurePBFReader,n,o),n}function getGeometryType(e,t){let r;return 1===e?r=1===t?"Point":"MultiPoint":2===e?r=1===t?"LineString":"MultiLineString":3===e&&(r="Polygon"),r}export default MVT;
//# sourceMappingURL=/sm/dfcc54a7ad23317088cb2c9542f869cac02a407bbd6e374474415cdecb2ceb2c.map