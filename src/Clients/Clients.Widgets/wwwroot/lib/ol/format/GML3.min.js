/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/format/GML3.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import GML2 from"./GML2.js";import GMLBase,{GMLNS}from"./GMLBase.js";import LineString from"../geom/LineString.js";import MultiLineString from"../geom/MultiLineString.js";import MultiPolygon from"../geom/MultiPolygon.js";import Polygon from"../geom/Polygon.js";import{OBJECT_PROPERTY_NODE_FACTORY,XML_SCHEMA_INSTANCE_URI,createElementNS,getAllTextContent,makeArrayExtender,makeArrayPusher,makeChildAppender,makeReplacer,makeSimpleNodeFactory,parseNode,pushParseAndPop,pushSerializeAndPop}from"../xml.js";import{createOrUpdate}from"../extent.js";import{extend}from"../array.js";import{get as getProjection}from"../proj.js";import{readNonNegativeIntegerString,writeStringTextNode}from"./xsd.js";import{transformExtentWithOptions,transformGeometryWithOptions}from"./Feature.js";const schemaLocation=GMLNS+" http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/1.0.0/gmlsf.xsd",MULTIGEOMETRY_TO_MEMBER_NODENAME={MultiLineString:"lineStringMember",MultiCurve:"curveMember",MultiPolygon:"polygonMember",MultiSurface:"surfaceMember"};class GML3 extends GMLBase{constructor(e){super(e=e||{}),this.surface_=void 0!==e.surface&&e.surface,this.curve_=void 0!==e.curve&&e.curve,this.multiCurve_=void 0===e.multiCurve||e.multiCurve,this.multiSurface_=void 0===e.multiSurface||e.multiSurface,this.schemaLocation=e.schemaLocation?e.schemaLocation:schemaLocation,this.hasZ=void 0!==e.hasZ&&e.hasZ}readMultiCurve(e,t){const r=pushParseAndPop([],this.MULTICURVE_PARSERS,e,t,this);if(r){return new MultiLineString(r)}}readFlatCurveRing(e,t){const r=pushParseAndPop([],this.MULTICURVE_PARSERS,e,t,this),i=[];for(let e=0,t=r.length;e<t;++e)extend(i,r[e].getFlatCoordinates());return i}readMultiSurface(e,t){const r=pushParseAndPop([],this.MULTISURFACE_PARSERS,e,t,this);if(r)return new MultiPolygon(r)}curveMemberParser(e,t){parseNode(this.CURVEMEMBER_PARSERS,e,t,this)}surfaceMemberParser(e,t){parseNode(this.SURFACEMEMBER_PARSERS,e,t,this)}readPatch(e,t){return pushParseAndPop([null],this.PATCHES_PARSERS,e,t,this)}readSegment(e,t){return pushParseAndPop([],this.SEGMENTS_PARSERS,e,t,this)}readPolygonPatch(e,t){return pushParseAndPop([null],this.FLAT_LINEAR_RINGS_PARSERS,e,t,this)}readLineStringSegment(e,t){return pushParseAndPop([null],this.GEOMETRY_FLAT_COORDINATES_PARSERS,e,t,this)}interiorParser(e,t){const r=pushParseAndPop(void 0,this.RING_PARSERS,e,t,this);if(r){t[t.length-1].push(r)}}exteriorParser(e,t){const r=pushParseAndPop(void 0,this.RING_PARSERS,e,t,this);if(r){t[t.length-1][0]=r}}readSurface(e,t){const r=pushParseAndPop([null],this.SURFACE_PARSERS,e,t,this);if(r&&r[0]){const e=r[0],t=[e.length];let i,n;for(i=1,n=r.length;i<n;++i)extend(e,r[i]),t.push(e.length);return new Polygon(e,"XYZ",t)}}readCurve(e,t){const r=pushParseAndPop([null],this.CURVE_PARSERS,e,t,this);if(r){return new LineString(r,"XYZ")}}readEnvelope(e,t){const r=pushParseAndPop([null],this.ENVELOPE_PARSERS,e,t,this);return createOrUpdate(r[1][0],r[1][1],r[2][0],r[2][1])}readFlatPos(e,t){let r=getAllTextContent(e,!1);const i=/^\s*([+\-]?\d*\.?\d+(?:[eE][+\-]?\d+)?)\s*/,n=[];let o;for(;o=i.exec(r);)n.push(parseFloat(o[1])),r=r.substr(o[0].length);if(""!==r)return;const s=t[0].srsName;let a="enu";if(s){a=getProjection(s).getAxisOrientation()}if("neu"===a){let e,t;for(e=0,t=n.length;e<t;e+=3){const t=n[e],r=n[e+1];n[e]=r,n[e+1]=t}}const p=n.length;return 2==p&&n.push(0),0!==p?n:void 0}readFlatPosList(e,t){const r=getAllTextContent(e,!1).replace(/^\s*|\s*$/g,""),i=t[0],n=i.srsName,o=i.srsDimension;let s="enu";if(n){s=getProjection(n).getAxisOrientation()}const a=r.split(/\s+/);let p,l,m,u=2;e.getAttribute("srsDimension")?u=readNonNegativeIntegerString(e.getAttribute("srsDimension")):e.getAttribute("dimension")?u=readNonNegativeIntegerString(e.getAttribute("dimension")):e.parentNode.getAttribute("srsDimension")?u=readNonNegativeIntegerString(e.parentNode.getAttribute("srsDimension")):o&&(u=readNonNegativeIntegerString(o));const h=[];for(let e=0,t=a.length;e<t;e+=u)p=parseFloat(a[e]),l=parseFloat(a[e+1]),m=3===u?parseFloat(a[e+2]):0,"en"===s.substr(0,2)?h.push(p,l,m):h.push(l,p,m);return h}writePos_(e,t,r){const i=r[r.length-1],n=i.hasZ,o=n?"3":"2";e.setAttribute("srsDimension",o);const s=i.srsName;let a="enu";s&&(a=getProjection(s).getAxisOrientation());const p=t.getCoordinates();let l;if(l="en"===a.substr(0,2)?p[0]+" "+p[1]:p[1]+" "+p[0],n){l+=" "+(p[2]||0)}writeStringTextNode(e,l)}getCoords_(e,t,r){let i="enu";t&&(i=getProjection(t).getAxisOrientation());let n="en"===i.substr(0,2)?e[0]+" "+e[1]:e[1]+" "+e[0];if(r){n+=" "+(e[2]||0)}return n}writePosList_(e,t,r){const i=r[r.length-1],n=i.hasZ,o=n?"3":"2";e.setAttribute("srsDimension",o);const s=i.srsName,a=t.getCoordinates(),p=a.length,l=new Array(p);let m;for(let e=0;e<p;++e)m=a[e],l[e]=this.getCoords_(m,s,n);writeStringTextNode(e,l.join(" "))}writePoint(e,t,r){const i=r[r.length-1].srsName;i&&e.setAttribute("srsName",i);const n=createElementNS(e.namespaceURI,"pos");e.appendChild(n),this.writePos_(n,t,r)}writeEnvelope(e,t,r){const i=r[r.length-1].srsName;i&&e.setAttribute("srsName",i);const n=[t[0]+" "+t[1],t[2]+" "+t[3]];pushSerializeAndPop({node:e},this.ENVELOPE_SERIALIZERS,OBJECT_PROPERTY_NODE_FACTORY,n,r,["lowerCorner","upperCorner"],this)}writeLinearRing(e,t,r){const i=r[r.length-1].srsName;i&&e.setAttribute("srsName",i);const n=createElementNS(e.namespaceURI,"posList");e.appendChild(n),this.writePosList_(n,t,r)}RING_NODE_FACTORY_(e,t,r){const i=t[t.length-1],n=i.node,o=i.exteriorWritten;return void 0===o&&(i.exteriorWritten=!0),createElementNS(n.namespaceURI,void 0!==o?"interior":"exterior")}writeSurfaceOrPolygon(e,t,r){const i=r[r.length-1],n=i.hasZ,o=i.srsName;if("PolygonPatch"!==e.nodeName&&o&&e.setAttribute("srsName",o),"Polygon"===e.nodeName||"PolygonPatch"===e.nodeName){const i=t.getLinearRings();pushSerializeAndPop({node:e,hasZ:n,srsName:o},this.RING_SERIALIZERS,this.RING_NODE_FACTORY_,i,r,void 0,this)}else if("Surface"===e.nodeName){const i=createElementNS(e.namespaceURI,"patches");e.appendChild(i),this.writeSurfacePatches_(i,t,r)}}writeCurveOrLineString(e,t,r){const i=r[r.length-1].srsName;if("LineStringSegment"!==e.nodeName&&i&&e.setAttribute("srsName",i),"LineString"===e.nodeName||"LineStringSegment"===e.nodeName){const i=createElementNS(e.namespaceURI,"posList");e.appendChild(i),this.writePosList_(i,t,r)}else if("Curve"===e.nodeName){const i=createElementNS(e.namespaceURI,"segments");e.appendChild(i),this.writeCurveSegments_(i,t,r)}}writeMultiSurfaceOrPolygon(e,t,r){const i=r[r.length-1],n=i.hasZ,o=i.srsName,s=i.surface;o&&e.setAttribute("srsName",o);const a=t.getPolygons();pushSerializeAndPop({node:e,hasZ:n,srsName:o,surface:s},this.SURFACEORPOLYGONMEMBER_SERIALIZERS,this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,a,r,void 0,this)}writeMultiPoint(e,t,r){const i=r[r.length-1],n=i.srsName,o=i.hasZ;n&&e.setAttribute("srsName",n);const s=t.getPoints();pushSerializeAndPop({node:e,hasZ:o,srsName:n},this.POINTMEMBER_SERIALIZERS,makeSimpleNodeFactory("pointMember"),s,r,void 0,this)}writeMultiCurveOrLineString(e,t,r){const i=r[r.length-1],n=i.hasZ,o=i.srsName,s=i.curve;o&&e.setAttribute("srsName",o);const a=t.getLineStrings();pushSerializeAndPop({node:e,hasZ:n,srsName:o,curve:s},this.LINESTRINGORCURVEMEMBER_SERIALIZERS,this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,a,r,void 0,this)}writeRing(e,t,r){const i=createElementNS(e.namespaceURI,"LinearRing");e.appendChild(i),this.writeLinearRing(i,t,r)}writeSurfaceOrPolygonMember(e,t,r){const i=this.GEOMETRY_NODE_FACTORY_(t,r);i&&(e.appendChild(i),this.writeSurfaceOrPolygon(i,t,r))}writePointMember(e,t,r){const i=createElementNS(e.namespaceURI,"Point");e.appendChild(i),this.writePoint(i,t,r)}writeLineStringOrCurveMember(e,t,r){const i=this.GEOMETRY_NODE_FACTORY_(t,r);i&&(e.appendChild(i),this.writeCurveOrLineString(i,t,r))}writeSurfacePatches_(e,t,r){const i=createElementNS(e.namespaceURI,"PolygonPatch");e.appendChild(i),this.writeSurfaceOrPolygon(i,t,r)}writeCurveSegments_(e,t,r){const i=createElementNS(e.namespaceURI,"LineStringSegment");e.appendChild(i),this.writeCurveOrLineString(i,t,r)}writeGeometryElement(e,t,r){const i=r[r.length-1],n=Object.assign({},i);let o;n.node=e,o=Array.isArray(t)?transformExtentWithOptions(t,i):transformGeometryWithOptions(t,!0,i),pushSerializeAndPop(n,this.GEOMETRY_SERIALIZERS,this.GEOMETRY_NODE_FACTORY_,[o],r,void 0,this)}writeFeatureElement(e,t,r){const i=t.getId();i&&e.setAttribute("fid",i);const n=r[r.length-1],o=n.featureNS,s=t.getGeometryName();n.serializers||(n.serializers={},n.serializers[o]={});const a=[],p=[];if(t.hasProperties()){const e=t.getProperties();for(const t in e){const r=e[t];null!==r&&(a.push(t),p.push(r),t==s||"function"==typeof r.getSimplifiedGeometry?t in n.serializers[o]||(n.serializers[o][t]=makeChildAppender(this.writeGeometryElement,this)):t in n.serializers[o]||(n.serializers[o][t]=makeChildAppender(writeStringTextNode)))}}const l=Object.assign({},n);l.node=e,pushSerializeAndPop(l,n.serializers,makeSimpleNodeFactory(void 0,o),p,r,a)}writeFeatureMembers_(e,t,r){const i=r[r.length-1],n=i.featureType,o=i.featureNS,s={};s[o]={},s[o][n]=makeChildAppender(this.writeFeatureElement,this);const a=Object.assign({},i);a.node=e,pushSerializeAndPop(a,s,makeSimpleNodeFactory(n,o),t,r)}MULTIGEOMETRY_MEMBER_NODE_FACTORY_(e,t,r){const i=t[t.length-1].node;return createElementNS(this.namespace,MULTIGEOMETRY_TO_MEMBER_NODENAME[i.nodeName])}GEOMETRY_NODE_FACTORY_(e,t,r){const i=t[t.length-1],n=i.multiSurface,o=i.surface,s=i.curve,a=i.multiCurve;return Array.isArray(e)?r="Envelope":"MultiPolygon"===(r=e.getType())&&!0===n?r="MultiSurface":"Polygon"===r&&!0===o?r="Surface":"LineString"===r&&!0===s?r="Curve":"MultiLineString"===r&&!0===a&&(r="MultiCurve"),createElementNS(this.namespace,r)}writeGeometryNode(e,t){t=this.adaptOptions(t);const r=createElementNS(this.namespace,"geom"),i={node:r,hasZ:this.hasZ,srsName:this.srsName,curve:this.curve_,surface:this.surface_,multiSurface:this.multiSurface_,multiCurve:this.multiCurve_};return t&&Object.assign(i,t),this.writeGeometryElement(r,e,[i]),r}writeFeaturesNode(e,t){t=this.adaptOptions(t);const r=createElementNS(this.namespace,"featureMembers");r.setAttributeNS(XML_SCHEMA_INSTANCE_URI,"xsi:schemaLocation",this.schemaLocation);const i={srsName:this.srsName,hasZ:this.hasZ,curve:this.curve_,surface:this.surface_,multiSurface:this.multiSurface_,multiCurve:this.multiCurve_,featureNS:this.featureNS,featureType:this.featureType};return t&&Object.assign(i,t),this.writeFeatureMembers_(r,e,[i]),r}}GML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS={"http://www.opengis.net/gml":{pos:makeReplacer(GML3.prototype.readFlatPos),posList:makeReplacer(GML3.prototype.readFlatPosList),coordinates:makeReplacer(GML2.prototype.readFlatCoordinates)}},GML3.prototype.FLAT_LINEAR_RINGS_PARSERS={"http://www.opengis.net/gml":{interior:GML3.prototype.interiorParser,exterior:GML3.prototype.exteriorParser}},GML3.prototype.GEOMETRY_PARSERS={"http://www.opengis.net/gml":{Point:makeReplacer(GMLBase.prototype.readPoint),MultiPoint:makeReplacer(GMLBase.prototype.readMultiPoint),LineString:makeReplacer(GMLBase.prototype.readLineString),MultiLineString:makeReplacer(GMLBase.prototype.readMultiLineString),LinearRing:makeReplacer(GMLBase.prototype.readLinearRing),Polygon:makeReplacer(GMLBase.prototype.readPolygon),MultiPolygon:makeReplacer(GMLBase.prototype.readMultiPolygon),Surface:makeReplacer(GML3.prototype.readSurface),MultiSurface:makeReplacer(GML3.prototype.readMultiSurface),Curve:makeReplacer(GML3.prototype.readCurve),MultiCurve:makeReplacer(GML3.prototype.readMultiCurve),Envelope:makeReplacer(GML3.prototype.readEnvelope)}},GML3.prototype.MULTICURVE_PARSERS={"http://www.opengis.net/gml":{curveMember:makeArrayPusher(GML3.prototype.curveMemberParser),curveMembers:makeArrayPusher(GML3.prototype.curveMemberParser)}},GML3.prototype.MULTISURFACE_PARSERS={"http://www.opengis.net/gml":{surfaceMember:makeArrayPusher(GML3.prototype.surfaceMemberParser),surfaceMembers:makeArrayPusher(GML3.prototype.surfaceMemberParser)}},GML3.prototype.CURVEMEMBER_PARSERS={"http://www.opengis.net/gml":{LineString:makeArrayPusher(GMLBase.prototype.readLineString),Curve:makeArrayPusher(GML3.prototype.readCurve)}},GML3.prototype.SURFACEMEMBER_PARSERS={"http://www.opengis.net/gml":{Polygon:makeArrayPusher(GMLBase.prototype.readPolygon),Surface:makeArrayPusher(GML3.prototype.readSurface)}},GML3.prototype.SURFACE_PARSERS={"http://www.opengis.net/gml":{patches:makeReplacer(GML3.prototype.readPatch)}},GML3.prototype.CURVE_PARSERS={"http://www.opengis.net/gml":{segments:makeReplacer(GML3.prototype.readSegment)}},GML3.prototype.ENVELOPE_PARSERS={"http://www.opengis.net/gml":{lowerCorner:makeArrayPusher(GML3.prototype.readFlatPosList),upperCorner:makeArrayPusher(GML3.prototype.readFlatPosList)}},GML3.prototype.PATCHES_PARSERS={"http://www.opengis.net/gml":{PolygonPatch:makeReplacer(GML3.prototype.readPolygonPatch)}},GML3.prototype.SEGMENTS_PARSERS={"http://www.opengis.net/gml":{LineStringSegment:makeArrayExtender(GML3.prototype.readLineStringSegment)}},GMLBase.prototype.RING_PARSERS={"http://www.opengis.net/gml":{LinearRing:makeReplacer(GMLBase.prototype.readFlatLinearRing),Ring:makeReplacer(GML3.prototype.readFlatCurveRing)}},GML3.prototype.writeFeatures,GML3.prototype.RING_SERIALIZERS={"http://www.opengis.net/gml":{exterior:makeChildAppender(GML3.prototype.writeRing),interior:makeChildAppender(GML3.prototype.writeRing)}},GML3.prototype.ENVELOPE_SERIALIZERS={"http://www.opengis.net/gml":{lowerCorner:makeChildAppender(writeStringTextNode),upperCorner:makeChildAppender(writeStringTextNode)}},GML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS={"http://www.opengis.net/gml":{surfaceMember:makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember),polygonMember:makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember)}},GML3.prototype.POINTMEMBER_SERIALIZERS={"http://www.opengis.net/gml":{pointMember:makeChildAppender(GML3.prototype.writePointMember)}},GML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS={"http://www.opengis.net/gml":{lineStringMember:makeChildAppender(GML3.prototype.writeLineStringOrCurveMember),curveMember:makeChildAppender(GML3.prototype.writeLineStringOrCurveMember)}},GML3.prototype.GEOMETRY_SERIALIZERS={"http://www.opengis.net/gml":{Curve:makeChildAppender(GML3.prototype.writeCurveOrLineString),MultiCurve:makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),Point:makeChildAppender(GML3.prototype.writePoint),MultiPoint:makeChildAppender(GML3.prototype.writeMultiPoint),LineString:makeChildAppender(GML3.prototype.writeCurveOrLineString),MultiLineString:makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),LinearRing:makeChildAppender(GML3.prototype.writeLinearRing),Polygon:makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),MultiPolygon:makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon),Surface:makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),MultiSurface:makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon),Envelope:makeChildAppender(GML3.prototype.writeEnvelope)}};export default GML3;
//# sourceMappingURL=/sm/5e80976c33397826cc1214c1f0830f2f885daf47efca968b95edcaa46c82e3e4.map