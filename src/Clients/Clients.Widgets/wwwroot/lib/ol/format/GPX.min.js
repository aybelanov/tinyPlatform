/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/format/GPX.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Feature from"../Feature.js";import LineString from"../geom/LineString.js";import MultiLineString from"../geom/MultiLineString.js";import Point from"../geom/Point.js";import XMLFeature from"./XMLFeature.js";import{OBJECT_PROPERTY_NODE_FACTORY,XML_SCHEMA_INSTANCE_URI,createElementNS,makeArrayPusher,makeArraySerializer,makeChildAppender,makeObjectPropertySetter,makeSequence,makeSimpleNodeFactory,makeStructureNS,parseNode,pushParseAndPop,pushSerializeAndPop}from"../xml.js";import{get as getProjection}from"../proj.js";import{readDateTime,readDecimal,readPositiveInteger,readString,writeDateTimeTextNode,writeDecimalTextNode,writeNonNegativeIntegerTextNode,writeStringTextNode}from"./xsd.js";import{transformGeometryWithOptions}from"./Feature.js";const NAMESPACE_URIS=[null,"http://www.topografix.com/GPX/1/0","http://www.topografix.com/GPX/1/1"],SCHEMA_LOCATION="http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd",FEATURE_READER={rte:readRte,trk:readTrk,wpt:readWpt},GPX_PARSERS=makeStructureNS(NAMESPACE_URIS,{rte:makeArrayPusher(readRte),trk:makeArrayPusher(readTrk),wpt:makeArrayPusher(readWpt)}),LINK_PARSERS=makeStructureNS(NAMESPACE_URIS,{text:makeObjectPropertySetter(readString,"linkText"),type:makeObjectPropertySetter(readString,"linkType")}),GPX_SERIALIZERS=makeStructureNS(NAMESPACE_URIS,{rte:makeChildAppender(writeRte),trk:makeChildAppender(writeTrk),wpt:makeChildAppender(writeWpt)});class GPX extends XMLFeature{constructor(e){super(),e=e||{},this.dataProjection=getProjection("EPSG:4326"),this.readExtensions_=e.readExtensions}handleReadExtensions_(e){e||(e=[]);for(let t=0,r=e.length;t<r;++t){const r=e[t];if(this.readExtensions_){const e=r.get("extensionsNode_")||null;this.readExtensions_(r,e)}r.set("extensionsNode_",void 0)}}readFeatureFromNode(e,t){if(!NAMESPACE_URIS.includes(e.namespaceURI))return null;const r=FEATURE_READER[e.localName];if(!r)return null;const n=r(e,[this.getReadOptions(e,t)]);return n?(this.handleReadExtensions_([n]),n):null}readFeaturesFromNode(e,t){if(!NAMESPACE_URIS.includes(e.namespaceURI))return[];if("gpx"==e.localName){const r=pushParseAndPop([],GPX_PARSERS,e,[this.getReadOptions(e,t)]);return r?(this.handleReadExtensions_(r),r):[]}return[]}writeFeaturesNode(e,t){t=this.adaptOptions(t);const r=createElementNS("http://www.topografix.com/GPX/1/1","gpx");return r.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:xsi",XML_SCHEMA_INSTANCE_URI),r.setAttributeNS(XML_SCHEMA_INSTANCE_URI,"xsi:schemaLocation",SCHEMA_LOCATION),r.setAttribute("version","1.1"),r.setAttribute("creator","OpenLayers"),pushSerializeAndPop({node:r},GPX_SERIALIZERS,GPX_NODE_FACTORY,e,[t]),r}}const RTE_PARSERS=makeStructureNS(NAMESPACE_URIS,{name:makeObjectPropertySetter(readString),cmt:makeObjectPropertySetter(readString),desc:makeObjectPropertySetter(readString),src:makeObjectPropertySetter(readString),link:parseLink,number:makeObjectPropertySetter(readPositiveInteger),extensions:parseExtensions,type:makeObjectPropertySetter(readString),rtept:parseRtePt}),RTEPT_PARSERS=makeStructureNS(NAMESPACE_URIS,{ele:makeObjectPropertySetter(readDecimal),time:makeObjectPropertySetter(readDateTime)}),TRK_PARSERS=makeStructureNS(NAMESPACE_URIS,{name:makeObjectPropertySetter(readString),cmt:makeObjectPropertySetter(readString),desc:makeObjectPropertySetter(readString),src:makeObjectPropertySetter(readString),link:parseLink,number:makeObjectPropertySetter(readPositiveInteger),type:makeObjectPropertySetter(readString),extensions:parseExtensions,trkseg:parseTrkSeg}),TRKSEG_PARSERS=makeStructureNS(NAMESPACE_URIS,{trkpt:parseTrkPt}),TRKPT_PARSERS=makeStructureNS(NAMESPACE_URIS,{ele:makeObjectPropertySetter(readDecimal),time:makeObjectPropertySetter(readDateTime)}),WPT_PARSERS=makeStructureNS(NAMESPACE_URIS,{ele:makeObjectPropertySetter(readDecimal),time:makeObjectPropertySetter(readDateTime),magvar:makeObjectPropertySetter(readDecimal),geoidheight:makeObjectPropertySetter(readDecimal),name:makeObjectPropertySetter(readString),cmt:makeObjectPropertySetter(readString),desc:makeObjectPropertySetter(readString),src:makeObjectPropertySetter(readString),link:parseLink,sym:makeObjectPropertySetter(readString),type:makeObjectPropertySetter(readString),fix:makeObjectPropertySetter(readString),sat:makeObjectPropertySetter(readPositiveInteger),hdop:makeObjectPropertySetter(readDecimal),vdop:makeObjectPropertySetter(readDecimal),pdop:makeObjectPropertySetter(readDecimal),ageofdgpsdata:makeObjectPropertySetter(readDecimal),dgpsid:makeObjectPropertySetter(readPositiveInteger),extensions:parseExtensions}),LINK_SEQUENCE=["text","type"],LINK_SERIALIZERS=makeStructureNS(NAMESPACE_URIS,{text:makeChildAppender(writeStringTextNode),type:makeChildAppender(writeStringTextNode)}),RTE_SEQUENCE=makeStructureNS(NAMESPACE_URIS,["name","cmt","desc","src","link","number","type","rtept"]),RTE_SERIALIZERS=makeStructureNS(NAMESPACE_URIS,{name:makeChildAppender(writeStringTextNode),cmt:makeChildAppender(writeStringTextNode),desc:makeChildAppender(writeStringTextNode),src:makeChildAppender(writeStringTextNode),link:makeChildAppender(writeLink),number:makeChildAppender(writeNonNegativeIntegerTextNode),type:makeChildAppender(writeStringTextNode),rtept:makeArraySerializer(makeChildAppender(writeWptType))}),RTEPT_TYPE_SEQUENCE=makeStructureNS(NAMESPACE_URIS,["ele","time"]),TRK_SEQUENCE=makeStructureNS(NAMESPACE_URIS,["name","cmt","desc","src","link","number","type","trkseg"]),TRK_SERIALIZERS=makeStructureNS(NAMESPACE_URIS,{name:makeChildAppender(writeStringTextNode),cmt:makeChildAppender(writeStringTextNode),desc:makeChildAppender(writeStringTextNode),src:makeChildAppender(writeStringTextNode),link:makeChildAppender(writeLink),number:makeChildAppender(writeNonNegativeIntegerTextNode),type:makeChildAppender(writeStringTextNode),trkseg:makeArraySerializer(makeChildAppender(writeTrkSeg))}),TRKSEG_NODE_FACTORY=makeSimpleNodeFactory("trkpt"),TRKSEG_SERIALIZERS=makeStructureNS(NAMESPACE_URIS,{trkpt:makeChildAppender(writeWptType)}),WPT_TYPE_SEQUENCE=makeStructureNS(NAMESPACE_URIS,["ele","time","magvar","geoidheight","name","cmt","desc","src","link","sym","type","fix","sat","hdop","vdop","pdop","ageofdgpsdata","dgpsid"]),WPT_TYPE_SERIALIZERS=makeStructureNS(NAMESPACE_URIS,{ele:makeChildAppender(writeDecimalTextNode),time:makeChildAppender(writeDateTimeTextNode),magvar:makeChildAppender(writeDecimalTextNode),geoidheight:makeChildAppender(writeDecimalTextNode),name:makeChildAppender(writeStringTextNode),cmt:makeChildAppender(writeStringTextNode),desc:makeChildAppender(writeStringTextNode),src:makeChildAppender(writeStringTextNode),link:makeChildAppender(writeLink),sym:makeChildAppender(writeStringTextNode),type:makeChildAppender(writeStringTextNode),fix:makeChildAppender(writeStringTextNode),sat:makeChildAppender(writeNonNegativeIntegerTextNode),hdop:makeChildAppender(writeDecimalTextNode),vdop:makeChildAppender(writeDecimalTextNode),pdop:makeChildAppender(writeDecimalTextNode),ageofdgpsdata:makeChildAppender(writeDecimalTextNode),dgpsid:makeChildAppender(writeNonNegativeIntegerTextNode)}),GEOMETRY_TYPE_TO_NODENAME={Point:"wpt",LineString:"rte",MultiLineString:"trk"};function GPX_NODE_FACTORY(e,t,r){const n=e.getGeometry();if(n){const e=GEOMETRY_TYPE_TO_NODENAME[n.getType()];if(e){const r=t[t.length-1].node;return createElementNS(r.namespaceURI,e)}}}function appendCoordinate(e,t,r,n){return e.push(parseFloat(r.getAttribute("lon")),parseFloat(r.getAttribute("lat"))),"ele"in n?(e.push(n.ele),delete n.ele,t.hasZ=!0):e.push(0),"time"in n?(e.push(n.time),delete n.time,t.hasM=!0):e.push(0),e}function applyLayoutOptions(e,t,r){let n="XY",i=2;if(e.hasZ&&e.hasM?(n="XYZM",i=4):e.hasZ?(n="XYZ",i=3):e.hasM&&(n="XYM",i=3),4!==i){for(let r=0,n=t.length/4;r<n;r++)t[r*i]=t[4*r],t[r*i+1]=t[4*r+1],e.hasZ&&(t[r*i+2]=t[4*r+2]),e.hasM&&(t[r*i+2]=t[4*r+3]);if(t.length=t.length/4*i,r)for(let e=0,t=r.length;e<t;e++)r[e]=r[e]/4*i}return n}function parseLink(e,t){const r=t[t.length-1],n=e.getAttribute("href");null!==n&&(r.link=n),parseNode(LINK_PARSERS,e,t)}function parseExtensions(e,t){t[t.length-1].extensionsNode_=e}function parseRtePt(e,t){const r=pushParseAndPop({},RTEPT_PARSERS,e,t);if(r){const n=t[t.length-1];appendCoordinate(n.flatCoordinates,n.layoutOptions,e,r)}}function parseTrkPt(e,t){const r=pushParseAndPop({},TRKPT_PARSERS,e,t);if(r){const n=t[t.length-1];appendCoordinate(n.flatCoordinates,n.layoutOptions,e,r)}}function parseTrkSeg(e,t){const r=t[t.length-1];parseNode(TRKSEG_PARSERS,e,t);const n=r.flatCoordinates;r.ends.push(n.length)}function readRte(e,t){const r=t[0],n=pushParseAndPop({flatCoordinates:[],layoutOptions:{}},RTE_PARSERS,e,t);if(!n)return;const i=n.flatCoordinates;delete n.flatCoordinates;const a=n.layoutOptions;delete n.layoutOptions;const o=applyLayoutOptions(a,i),p=new LineString(i,o);transformGeometryWithOptions(p,!1,r);const s=new Feature(p);return s.setProperties(n,!0),s}function readTrk(e,t){const r=t[0],n=pushParseAndPop({flatCoordinates:[],ends:[],layoutOptions:{}},TRK_PARSERS,e,t);if(!n)return;const i=n.flatCoordinates;delete n.flatCoordinates;const a=n.ends;delete n.ends;const o=n.layoutOptions;delete n.layoutOptions;const p=applyLayoutOptions(o,i,a),s=new MultiLineString(i,p,a);transformGeometryWithOptions(s,!1,r);const d=new Feature(s);return d.setProperties(n,!0),d}function readWpt(e,t){const r=t[0],n=pushParseAndPop({},WPT_PARSERS,e,t);if(!n)return;const i={},a=appendCoordinate([],i,e,n),o=applyLayoutOptions(i,a),p=new Point(a,o);transformGeometryWithOptions(p,!1,r);const s=new Feature(p);return s.setProperties(n,!0),s}function writeLink(e,t,r){e.setAttribute("href",t);const n=r[r.length-1].properties,i=[n.linkText,n.linkType];pushSerializeAndPop({node:e},LINK_SERIALIZERS,OBJECT_PROPERTY_NODE_FACTORY,i,r,LINK_SEQUENCE)}function writeWptType(e,t,r){const n=r[r.length-1],i=n.node.namespaceURI,a=n.properties;e.setAttributeNS(null,"lat",String(t[1])),e.setAttributeNS(null,"lon",String(t[0]));switch(n.geometryLayout){case"XYZM":0!==t[3]&&(a.time=t[3]);case"XYZ":0!==t[2]&&(a.ele=t[2]);break;case"XYM":0!==t[2]&&(a.time=t[2])}const o="rtept"==e.nodeName?RTEPT_TYPE_SEQUENCE[i]:WPT_TYPE_SEQUENCE[i],p=makeSequence(a,o);pushSerializeAndPop({node:e,properties:a},WPT_TYPE_SERIALIZERS,OBJECT_PROPERTY_NODE_FACTORY,p,r,o)}function writeRte(e,t,r){const n=r[0],i=t.getProperties(),a={node:e};a.properties=i;const o=t.getGeometry();if("LineString"==o.getType()){const e=transformGeometryWithOptions(o,!0,n);a.geometryLayout=e.getLayout(),i.rtept=e.getCoordinates()}const p=r[r.length-1].node,s=RTE_SEQUENCE[p.namespaceURI],d=makeSequence(i,s);pushSerializeAndPop(a,RTE_SERIALIZERS,OBJECT_PROPERTY_NODE_FACTORY,d,r,s)}function writeTrk(e,t,r){const n=r[0],i=t.getProperties(),a={node:e};a.properties=i;const o=t.getGeometry();if("MultiLineString"==o.getType()){const e=transformGeometryWithOptions(o,!0,n);i.trkseg=e.getLineStrings()}const p=r[r.length-1].node,s=TRK_SEQUENCE[p.namespaceURI],d=makeSequence(i,s);pushSerializeAndPop(a,TRK_SERIALIZERS,OBJECT_PROPERTY_NODE_FACTORY,d,r,s)}function writeTrkSeg(e,t,r){const n={node:e};n.geometryLayout=t.getLayout(),n.properties={},pushSerializeAndPop(n,TRKSEG_SERIALIZERS,TRKSEG_NODE_FACTORY,t.getCoordinates(),r)}function writeWpt(e,t,r){const n=r[0],i=r[r.length-1];i.properties=t.getProperties();const a=t.getGeometry();if("Point"==a.getType()){const t=transformGeometryWithOptions(a,!0,n);i.geometryLayout=t.getLayout(),writeWptType(e,t.getCoordinates(),r)}}export default GPX;
//# sourceMappingURL=/sm/35689548bbd0f26e181fd41018c1a3a3faacdfc23ad350e6d32b545f95569628.map