/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/format/GMLBase.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Feature from"../Feature.js";import Geometry from"../geom/Geometry.js";import LineString from"../geom/LineString.js";import LinearRing from"../geom/LinearRing.js";import MultiLineString from"../geom/MultiLineString.js";import MultiPoint from"../geom/MultiPoint.js";import MultiPolygon from"../geom/MultiPolygon.js";import Point from"../geom/Point.js";import Polygon from"../geom/Polygon.js";import XMLFeature from"./XMLFeature.js";import{extend}from"../array.js";import{getAllTextContent,getAttributeNS,makeArrayPusher,makeReplacer,parseNode,pushParseAndPop}from"../xml.js";import{get as getProjection}from"../proj.js";import{transformExtentWithOptions,transformGeometryWithOptions}from"./Feature.js";export const GMLNS="http://www.opengis.net/gml";const ONLY_WHITESPACE_RE=/^\s*$/;class GMLBase extends XMLFeature{constructor(e){super(),e=e||{},this.featureType=e.featureType,this.featureNS=e.featureNS,this.srsName=e.srsName,this.schemaLocation="",this.FEATURE_COLLECTION_PARSERS={},this.FEATURE_COLLECTION_PARSERS[this.namespace]={featureMember:makeArrayPusher(this.readFeaturesInternal),featureMembers:makeReplacer(this.readFeaturesInternal)},this.supportedMediaTypes=["application/gml+xml"]}readFeaturesInternal(e,t){const r=e.localName;let o=null;if("FeatureCollection"==r)o=pushParseAndPop([],this.FEATURE_COLLECTION_PARSERS,e,t,this);else if("featureMembers"==r||"featureMember"==r||"member"==r){const n=t[0];let s=n.featureType,i=n.featureNS;const a="p",p="p0";if(!s&&e.childNodes){s=[],i={};for(let t=0,r=e.childNodes.length;t<r;++t){const r=e.childNodes[t];if(1===r.nodeType){const e=r.nodeName.split(":").pop();if(!s.includes(e)){let t="",o=0;const n=r.namespaceURI;for(const e in i){if(i[e]===n){t=e;break}++o}t||(t=a+o,i[t]=n),s.push(t+":"+e)}}}"featureMember"!=r&&(n.featureType=s,n.featureNS=i)}if("string"==typeof i){const e=i;i={},i[p]=e}const m={},l=Array.isArray(s)?s:[s];for(const e in i){const t={};for(let o=0,n=l.length;o<n;++o){(l[o].includes(":")?l[o].split(":")[0]:p)===e&&(t[l[o].split(":").pop()]="featureMembers"==r?makeArrayPusher(this.readFeatureElement,this):makeReplacer(this.readFeatureElement,this))}m[i[e]]=t}o=pushParseAndPop("featureMember"==r||"member"==r?void 0:[],m,e,t)}return null===o&&(o=[]),o}readGeometryOrExtent(e,t){const r=t[0];return r.srsName=e.firstElementChild.getAttribute("srsName"),r.srsDimension=e.firstElementChild.getAttribute("srsDimension"),pushParseAndPop(null,this.GEOMETRY_PARSERS,e,t,this)}readExtentElement(e,t){const r=t[0],o=this.readGeometryOrExtent(e,t);return o?transformExtentWithOptions(o,r):void 0}readGeometryElement(e,t){const r=t[0],o=this.readGeometryOrExtent(e,t);return o?transformGeometryWithOptions(o,!1,r):void 0}readFeatureElementInternal(e,t,r){let o;const n={};for(let s=e.firstElementChild;s;s=s.nextElementSibling){let e;const i=s.localName;0===s.childNodes.length||1===s.childNodes.length&&(3===s.firstChild.nodeType||4===s.firstChild.nodeType)?(e=getAllTextContent(s,!1),ONLY_WHITESPACE_RE.test(e)&&(e=void 0)):(r&&(e="boundedBy"===i?this.readExtentElement(s,t):this.readGeometryElement(s,t)),e?"boundedBy"!==i&&(o=i):e=this.readFeatureElementInternal(s,t,!1));const a=s.attributes.length;if(a>0&&!(e instanceof Geometry)){e={_content_:e};for(let t=0;t<a;t++){e[s.attributes[t].name]=s.attributes[t].value}}n[i]?(n[i]instanceof Array||(n[i]=[n[i]]),n[i].push(e)):n[i]=e}if(!r)return n;const s=new Feature(n);o&&s.setGeometryName(o);const i=e.getAttribute("fid")||getAttributeNS(e,this.namespace,"id");return i&&s.setId(i),s}readFeatureElement(e,t){return this.readFeatureElementInternal(e,t,!0)}readPoint(e,t){const r=this.readFlatCoordinatesFromNode(e,t);if(r)return new Point(r,"XYZ")}readMultiPoint(e,t){const r=pushParseAndPop([],this.MULTIPOINT_PARSERS,e,t,this);if(r)return new MultiPoint(r)}readMultiLineString(e,t){const r=pushParseAndPop([],this.MULTILINESTRING_PARSERS,e,t,this);if(r)return new MultiLineString(r)}readMultiPolygon(e,t){const r=pushParseAndPop([],this.MULTIPOLYGON_PARSERS,e,t,this);if(r)return new MultiPolygon(r)}pointMemberParser(e,t){parseNode(this.POINTMEMBER_PARSERS,e,t,this)}lineStringMemberParser(e,t){parseNode(this.LINESTRINGMEMBER_PARSERS,e,t,this)}polygonMemberParser(e,t){parseNode(this.POLYGONMEMBER_PARSERS,e,t,this)}readLineString(e,t){const r=this.readFlatCoordinatesFromNode(e,t);if(r){return new LineString(r,"XYZ")}}readFlatLinearRing(e,t){const r=pushParseAndPop(null,this.GEOMETRY_FLAT_COORDINATES_PARSERS,e,t,this);if(r)return r}readLinearRing(e,t){const r=this.readFlatCoordinatesFromNode(e,t);if(r)return new LinearRing(r,"XYZ")}readPolygon(e,t){const r=pushParseAndPop([null],this.FLAT_LINEAR_RINGS_PARSERS,e,t,this);if(r&&r[0]){const e=r[0],t=[e.length];let o,n;for(o=1,n=r.length;o<n;++o)extend(e,r[o]),t.push(e.length);return new Polygon(e,"XYZ",t)}}readFlatCoordinatesFromNode(e,t){return pushParseAndPop(null,this.GEOMETRY_FLAT_COORDINATES_PARSERS,e,t,this)}readGeometryFromNode(e,t){const r=this.readGeometryElement(e,[this.getReadOptions(e,t||{})]);return r||null}readFeaturesFromNode(e,t){const r={featureType:this.featureType,featureNS:this.featureNS};r&&Object.assign(r,this.getReadOptions(e,t));return this.readFeaturesInternal(e,[r])||[]}readProjectionFromNode(e){return getProjection(this.srsName?this.srsName:e.firstElementChild.getAttribute("srsName"))}}GMLBase.prototype.namespace=GMLNS,GMLBase.prototype.FLAT_LINEAR_RINGS_PARSERS={"http://www.opengis.net/gml":{}},GMLBase.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS={"http://www.opengis.net/gml":{}},GMLBase.prototype.GEOMETRY_PARSERS={"http://www.opengis.net/gml":{}},GMLBase.prototype.MULTIPOINT_PARSERS={"http://www.opengis.net/gml":{pointMember:makeArrayPusher(GMLBase.prototype.pointMemberParser),pointMembers:makeArrayPusher(GMLBase.prototype.pointMemberParser)}},GMLBase.prototype.MULTILINESTRING_PARSERS={"http://www.opengis.net/gml":{lineStringMember:makeArrayPusher(GMLBase.prototype.lineStringMemberParser),lineStringMembers:makeArrayPusher(GMLBase.prototype.lineStringMemberParser)}},GMLBase.prototype.MULTIPOLYGON_PARSERS={"http://www.opengis.net/gml":{polygonMember:makeArrayPusher(GMLBase.prototype.polygonMemberParser),polygonMembers:makeArrayPusher(GMLBase.prototype.polygonMemberParser)}},GMLBase.prototype.POINTMEMBER_PARSERS={"http://www.opengis.net/gml":{Point:makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode)}},GMLBase.prototype.LINESTRINGMEMBER_PARSERS={"http://www.opengis.net/gml":{LineString:makeArrayPusher(GMLBase.prototype.readLineString)}},GMLBase.prototype.POLYGONMEMBER_PARSERS={"http://www.opengis.net/gml":{Polygon:makeArrayPusher(GMLBase.prototype.readPolygon)}},GMLBase.prototype.RING_PARSERS={"http://www.opengis.net/gml":{LinearRing:makeReplacer(GMLBase.prototype.readFlatLinearRing)}};export default GMLBase;
//# sourceMappingURL=/sm/e9a9f89642271109e88e8c2b2e573702d337605cdcf64b25803deca60408dd30.map