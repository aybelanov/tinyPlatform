/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/format/WKB.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Feature from"../Feature.js";import FeatureFormat,{transformGeometryWithOptions}from"./Feature.js";import GeometryCollection from"../geom/GeometryCollection.js";import LineString from"../geom/LineString.js";import MultiLineString from"../geom/MultiLineString.js";import MultiPoint from"../geom/MultiPoint.js";import MultiPolygon from"../geom/MultiPolygon.js";import Point from"../geom/Point.js";import Polygon from"../geom/Polygon.js";import{get as getProjection}from"../proj.js";import SimpleGeometry from"../geom/SimpleGeometry.js";const WKBGeometryType={POINT:1,LINE_STRING:2,POLYGON:3,MULTI_POINT:4,MULTI_LINE_STRING:5,MULTI_POLYGON:6,GEOMETRY_COLLECTION:7,POLYHEDRAL_SURFACE:15,TIN:16,TRIANGLE:17};class WkbReader{constructor(t){this.view_=t,this.pos_=0,this.initialized_=!1,this.isLittleEndian_=!1,this.hasZ_=!1,this.hasM_=!1,this.srid_=null,this.layout_="XY"}readUint8(){return this.view_.getUint8(this.pos_++)}readUint32(t){return this.view_.getUint32((this.pos_+=4)-4,void 0!==t?t:this.isLittleEndian_)}readDouble(t){return this.view_.getFloat64((this.pos_+=8)-8,void 0!==t?t:this.isLittleEndian_)}readPoint(){const t=[];return t.push(this.readDouble()),t.push(this.readDouble()),this.hasZ_&&t.push(this.readDouble()),this.hasM_&&t.push(this.readDouble()),t}readLineString(){const t=this.readUint32(),e=[];for(let i=0;i<t;i++)e.push(this.readPoint());return e}readPolygon(){const t=this.readUint32(),e=[];for(let i=0;i<t;i++)e.push(this.readLineString());return e}readWkbHeader(t){const e=this.readUint8()>0,i=this.readUint32(e),r=Math.floor((268435455&i)/1e3),o=Boolean(2147483648&i)||1===r||3===r,n=Boolean(1073741824&i)||2===r||3===r,s=Boolean(536870912&i),a=(268435455&i)%1e3,l=["XY",o?"Z":"",n?"M":""].join(""),h=s?this.readUint32(e):null;if(void 0!==t&&t!==a)throw new Error("Unexpected WKB geometry type "+a);if(this.initialized_){if(this.isLittleEndian_!==e)throw new Error("Inconsistent endian");if(this.layout_!==l)throw new Error("Inconsistent geometry layout");if(h&&this.srid_!==h)throw new Error("Inconsistent coordinate system (SRID)")}else this.isLittleEndian_=e,this.hasZ_=o,this.hasM_=n,this.layout_=l,this.srid_=h,this.initialized_=!0;return a}readWkbPayload(t){switch(t){case WKBGeometryType.POINT:return this.readPoint();case WKBGeometryType.LINE_STRING:return this.readLineString();case WKBGeometryType.POLYGON:case WKBGeometryType.TRIANGLE:return this.readPolygon();case WKBGeometryType.MULTI_POINT:return this.readMultiPoint();case WKBGeometryType.MULTI_LINE_STRING:return this.readMultiLineString();case WKBGeometryType.MULTI_POLYGON:case WKBGeometryType.POLYHEDRAL_SURFACE:case WKBGeometryType.TIN:return this.readMultiPolygon();case WKBGeometryType.GEOMETRY_COLLECTION:return this.readGeometryCollection();default:throw new Error("Unsupported WKB geometry type "+t+" is found")}}readWkbBlock(t){return this.readWkbPayload(this.readWkbHeader(t))}readWkbCollection(t,e){const i=this.readUint32(),r=[];for(let o=0;o<i;o++){const i=t.call(this,e);i&&r.push(i)}return r}readMultiPoint(){return this.readWkbCollection(this.readWkbBlock,WKBGeometryType.POINT)}readMultiLineString(){return this.readWkbCollection(this.readWkbBlock,WKBGeometryType.LINE_STRING)}readMultiPolygon(){return this.readWkbCollection(this.readWkbBlock,WKBGeometryType.POLYGON)}readGeometryCollection(){return this.readWkbCollection(this.readGeometry)}readGeometry(){const t=this.readWkbHeader(),e=this.readWkbPayload(t);switch(t){case WKBGeometryType.POINT:return new Point(e,this.layout_);case WKBGeometryType.LINE_STRING:return new LineString(e,this.layout_);case WKBGeometryType.POLYGON:case WKBGeometryType.TRIANGLE:return new Polygon(e,this.layout_);case WKBGeometryType.MULTI_POINT:return new MultiPoint(e,this.layout_);case WKBGeometryType.MULTI_LINE_STRING:return new MultiLineString(e,this.layout_);case WKBGeometryType.MULTI_POLYGON:case WKBGeometryType.POLYHEDRAL_SURFACE:case WKBGeometryType.TIN:return new MultiPolygon(e,this.layout_);case WKBGeometryType.GEOMETRY_COLLECTION:return new GeometryCollection(e);default:return null}}getSrid(){return this.srid_}}class WkbWriter{constructor(t){t=t||{},this.layout_=t.layout,this.isLittleEndian_=!1!==t.littleEndian,this.isEWKB_=!1!==t.ewkb,this.writeQueue_=[],this.nodata_=Object.assign({X:0,Y:0,Z:0,M:0},t.nodata)}writeUint8(t){this.writeQueue_.push([1,t])}writeUint32(t){this.writeQueue_.push([4,t])}writeDouble(t){this.writeQueue_.push([8,t])}writePoint(t,e){const i=Object.assign.apply(null,e.split("").map(((e,i)=>({[e]:t[i]}))));for(const t of this.layout_)this.writeDouble(t in i?i[t]:this.nodata_[t])}writeLineString(t,e){this.writeUint32(t.length);for(let i=0;i<t.length;i++)this.writePoint(t[i],e)}writePolygon(t,e){this.writeUint32(t.length);for(let i=0;i<t.length;i++)this.writeLineString(t[i],e)}writeWkbHeader(t,e){t%=1e3,this.layout_.includes("Z")&&(t+=this.isEWKB_?2147483648:1e3),this.layout_.includes("M")&&(t+=this.isEWKB_?1073741824:2e3),this.isEWKB_&&Number.isInteger(e)&&(t|=536870912),this.writeUint8(this.isLittleEndian_?1:0),this.writeUint32(t),this.isEWKB_&&Number.isInteger(e)&&this.writeUint32(e)}writeMultiPoint(t,e){this.writeUint32(t.length);for(let i=0;i<t.length;i++)this.writeWkbHeader(1),this.writePoint(t[i],e)}writeMultiLineString(t,e){this.writeUint32(t.length);for(let i=0;i<t.length;i++)this.writeWkbHeader(2),this.writeLineString(t[i],e)}writeMultiPolygon(t,e){this.writeUint32(t.length);for(let i=0;i<t.length;i++)this.writeWkbHeader(3),this.writePolygon(t[i],e)}writeGeometryCollection(t){this.writeUint32(t.length);for(let e=0;e<t.length;e++)this.writeGeometry(t[e])}findMinimumLayout(t,e="XYZM"){if(t instanceof SimpleGeometry)return(i=t.getLayout())===(r=e)?i:"XYZM"===i?r:"XYZM"===r?i:"XY";var i,r;if(t instanceof GeometryCollection){const i=t.getGeometriesArray();for(let t=0;t<i.length&&"XY"!==e;t++)e=this.findMinimumLayout(i[t],e)}return e}writeGeometry(t,e){const i={Point:WKBGeometryType.POINT,LineString:WKBGeometryType.LINE_STRING,Polygon:WKBGeometryType.POLYGON,MultiPoint:WKBGeometryType.MULTI_POINT,MultiLineString:WKBGeometryType.MULTI_LINE_STRING,MultiPolygon:WKBGeometryType.MULTI_POLYGON,GeometryCollection:WKBGeometryType.GEOMETRY_COLLECTION},r=t.getType(),o=i[r];if(!o)throw new Error("GeometryType "+r+" is not supported");if(this.layout_||(this.layout_=this.findMinimumLayout(t)),this.writeWkbHeader(o,e),t instanceof SimpleGeometry){({Point:this.writePoint,LineString:this.writeLineString,Polygon:this.writePolygon,MultiPoint:this.writeMultiPoint,MultiLineString:this.writeMultiLineString,MultiPolygon:this.writeMultiPolygon})[r].call(this,t.getCoordinates(),t.getLayout())}else t instanceof GeometryCollection&&this.writeGeometryCollection(t.getGeometriesArray())}getBuffer(){const t=this.writeQueue_.reduce(((t,e)=>t+e[0]),0),e=new ArrayBuffer(t),i=new DataView(e);let r=0;return this.writeQueue_.forEach((t=>{switch(t[0]){case 1:i.setUint8(r,t[1]);break;case 4:i.setUint32(r,t[1],this.isLittleEndian_);break;case 8:i.setFloat64(r,t[1],this.isLittleEndian_)}r+=t[0]})),e}}class WKB extends FeatureFormat{constructor(t){super(),t=t||{},this.splitCollection=Boolean(t.splitCollection),this.viewCache_=null,this.hex_=!1!==t.hex,this.littleEndian_=!1!==t.littleEndian,this.ewkb_=!1!==t.ewkb,this.layout_=t.geometryLayout,this.nodataZ_=t.nodataZ||0,this.nodataM_=t.nodataM||0,this.srid_=t.srid}getType(){return this.hex_?"text":"arraybuffer"}readFeature(t,e){return new Feature({geometry:this.readGeometry(t,e)})}readFeatures(t,e){let i=[];const r=this.readGeometry(t,e);return i=this.splitCollection&&r instanceof GeometryCollection?r.getGeometriesArray():[r],i.map((t=>new Feature({geometry:t})))}readGeometry(t,e){const i=getDataView(t);if(!i)return null;const r=new WkbReader(i).readGeometry();return this.viewCache_=i,e=this.getReadOptions(t,e),this.viewCache_=null,transformGeometryWithOptions(r,!1,e)}readProjection(t){const e=this.viewCache_||getDataView(t);if(!e)return;const i=new WkbReader(e);return i.readWkbHeader(),i.getSrid()&&getProjection("EPSG:"+i.getSrid())||void 0}writeFeature(t,e){return this.writeGeometry(t.getGeometry(),e)}writeFeatures(t,e){return this.writeGeometry(new GeometryCollection(t.map((t=>t.getGeometry()))),e)}writeGeometry(t,e){e=this.adaptOptions(e);const i=new WkbWriter({layout:this.layout_,littleEndian:this.littleEndian_,ewkb:this.ewkb_,nodata:{Z:this.nodataZ_,M:this.nodataM_}});let r=Number.isInteger(this.srid_)?Number(this.srid_):null;if(!1!==this.srid_&&!Number.isInteger(this.srid_)){const t=e.dataProjection&&getProjection(e.dataProjection);if(t){const e=t.getCode();e.startsWith("EPSG:")&&(r=Number(e.substring(5)))}}i.writeGeometry(transformGeometryWithOptions(t,!0,e),r);const o=i.getBuffer();return this.hex_?encodeHexString(o):o}}function encodeHexString(t){const e=new Uint8Array(t);return Array.from(e.values()).map((t=>(t<16?"0":"")+Number(t).toString(16).toUpperCase())).join("")}function decodeHexString(t){const e=new Uint8Array(t.length/2);for(let i=0;i<t.length/2;i++)e[i]=parseInt(t.substr(2*i,2),16);return new DataView(e.buffer)}function getDataView(t){return"string"==typeof t?decodeHexString(t):ArrayBuffer.isView(t)?t instanceof DataView?t:new DataView(t.buffer,t.byteOffset,t.byteLength):t instanceof ArrayBuffer?new DataView(t):null}export default WKB;
//# sourceMappingURL=/sm/dda709e5846e5149487a15015c1a091e9edf0acab9feb257d15bd64c6a9dbfa4.map