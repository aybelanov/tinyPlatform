/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/format/GML2.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import GMLBase,{GMLNS}from"./GMLBase.js";import{OBJECT_PROPERTY_NODE_FACTORY,createElementNS,getAllTextContent,makeArrayPusher,makeChildAppender,makeReplacer,makeSimpleNodeFactory,pushParseAndPop,pushSerializeAndPop}from"../xml.js";import{createOrUpdate}from"../extent.js";import{get as getProjection}from"../proj.js";import{transformExtentWithOptions,transformGeometryWithOptions}from"./Feature.js";import{writeStringTextNode}from"./xsd.js";const schemaLocation=GMLNS+" http://schemas.opengis.net/gml/2.1.2/feature.xsd",MULTIGEOMETRY_TO_MEMBER_NODENAME={MultiLineString:"lineStringMember",MultiCurve:"curveMember",MultiPolygon:"polygonMember",MultiSurface:"surfaceMember"};class GML2 extends GMLBase{constructor(e){super(e=e||{}),this.FEATURE_COLLECTION_PARSERS[GMLNS].featureMember=makeArrayPusher(this.readFeaturesInternal),this.schemaLocation=e.schemaLocation?e.schemaLocation:schemaLocation}readFlatCoordinates(e,t){const r=getAllTextContent(e,!1).replace(/^\s*|\s*$/g,""),n=t[0].srsName;let i="enu";if(n){const e=getProjection(n);e&&(i=e.getAxisOrientation())}const o=r.trim().split(/\s+/),s=[];for(let e=0,t=o.length;e<t;e++){const t=o[e].split(/,+/),r=parseFloat(t[0]),n=parseFloat(t[1]),a=3===t.length?parseFloat(t[2]):0;"en"===i.substr(0,2)?s.push(r,n,a):s.push(n,r,a)}return s}readBox(e,t){const r=pushParseAndPop([null],this.BOX_PARSERS_,e,t,this);return createOrUpdate(r[1][0],r[1][1],r[1][3],r[1][4])}innerBoundaryIsParser(e,t){const r=pushParseAndPop(void 0,this.RING_PARSERS,e,t,this);if(r){t[t.length-1].push(r)}}outerBoundaryIsParser(e,t){const r=pushParseAndPop(void 0,this.RING_PARSERS,e,t,this);if(r){t[t.length-1][0]=r}}GEOMETRY_NODE_FACTORY_(e,t,r){const n=t[t.length-1],i=n.multiSurface,o=n.surface,s=n.multiCurve;return Array.isArray(e)?r="Envelope":"MultiPolygon"===(r=e.getType())&&!0===i?r="MultiSurface":"Polygon"===r&&!0===o?r="Surface":"MultiLineString"===r&&!0===s&&(r="MultiCurve"),createElementNS("http://www.opengis.net/gml",r)}writeFeatureElement(e,t,r){const n=t.getId();n&&e.setAttribute("fid",n);const i=r[r.length-1],o=i.featureNS,s=t.getGeometryName();i.serializers||(i.serializers={},i.serializers[o]={});const a=[],p=[];if(t.hasProperties()){const e=t.getProperties();for(const t in e){const r=e[t];null!==r&&(a.push(t),p.push(r),t==s||"function"==typeof r.getSimplifiedGeometry?t in i.serializers[o]||(i.serializers[o][t]=makeChildAppender(this.writeGeometryElement,this)):t in i.serializers[o]||(i.serializers[o][t]=makeChildAppender(writeStringTextNode)))}}const l=Object.assign({},i);l.node=e,pushSerializeAndPop(l,i.serializers,makeSimpleNodeFactory(void 0,o),p,r,a)}writeCurveOrLineString(e,t,r){const n=r[r.length-1].srsName;if("LineStringSegment"!==e.nodeName&&n&&e.setAttribute("srsName",n),"LineString"===e.nodeName||"LineStringSegment"===e.nodeName){const n=this.createCoordinatesNode_(e.namespaceURI);e.appendChild(n),this.writeCoordinates_(n,t,r)}else if("Curve"===e.nodeName){const n=createElementNS(e.namespaceURI,"segments");e.appendChild(n),this.writeCurveSegments_(n,t,r)}}writeLineStringOrCurveMember(e,t,r){const n=this.GEOMETRY_NODE_FACTORY_(t,r);n&&(e.appendChild(n),this.writeCurveOrLineString(n,t,r))}writeMultiCurveOrLineString(e,t,r){const n=r[r.length-1],i=n.hasZ,o=n.srsName,s=n.curve;o&&e.setAttribute("srsName",o);const a=t.getLineStrings();pushSerializeAndPop({node:e,hasZ:i,srsName:o,curve:s},this.LINESTRINGORCURVEMEMBER_SERIALIZERS,this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,a,r,void 0,this)}writeGeometryElement(e,t,r){const n=r[r.length-1],i=Object.assign({},n);let o;i.node=e,o=Array.isArray(t)?transformExtentWithOptions(t,n):transformGeometryWithOptions(t,!0,n),pushSerializeAndPop(i,this.GEOMETRY_SERIALIZERS,this.GEOMETRY_NODE_FACTORY_,[o],r,void 0,this)}createCoordinatesNode_(e){const t=createElementNS(e,"coordinates");return t.setAttribute("decimal","."),t.setAttribute("cs",","),t.setAttribute("ts"," "),t}writeCoordinates_(e,t,r){const n=r[r.length-1],i=n.hasZ,o=n.srsName,s=t.getCoordinates(),a=s.length,p=new Array(a);for(let e=0;e<a;++e){const t=s[e];p[e]=this.getCoords_(t,o,i)}writeStringTextNode(e,p.join(" "))}writeCurveSegments_(e,t,r){const n=createElementNS(e.namespaceURI,"LineStringSegment");e.appendChild(n),this.writeCurveOrLineString(n,t,r)}writeSurfaceOrPolygon(e,t,r){const n=r[r.length-1],i=n.hasZ,o=n.srsName;if("PolygonPatch"!==e.nodeName&&o&&e.setAttribute("srsName",o),"Polygon"===e.nodeName||"PolygonPatch"===e.nodeName){const n=t.getLinearRings();pushSerializeAndPop({node:e,hasZ:i,srsName:o},this.RING_SERIALIZERS,this.RING_NODE_FACTORY_,n,r,void 0,this)}else if("Surface"===e.nodeName){const n=createElementNS(e.namespaceURI,"patches");e.appendChild(n),this.writeSurfacePatches_(n,t,r)}}RING_NODE_FACTORY_(e,t,r){const n=t[t.length-1],i=n.node,o=n.exteriorWritten;return void 0===o&&(n.exteriorWritten=!0),createElementNS(i.namespaceURI,void 0!==o?"innerBoundaryIs":"outerBoundaryIs")}writeSurfacePatches_(e,t,r){const n=createElementNS(e.namespaceURI,"PolygonPatch");e.appendChild(n),this.writeSurfaceOrPolygon(n,t,r)}writeRing(e,t,r){const n=createElementNS(e.namespaceURI,"LinearRing");e.appendChild(n),this.writeLinearRing(n,t,r)}getCoords_(e,t,r){let n="enu";t&&(n=getProjection(t).getAxisOrientation());let i="en"===n.substr(0,2)?e[0]+","+e[1]:e[1]+","+e[0];if(r){i+=","+(e[2]||0)}return i}writePoint(e,t,r){const n=r[r.length-1],i=n.hasZ,o=n.srsName;o&&e.setAttribute("srsName",o);const s=this.createCoordinatesNode_(e.namespaceURI);e.appendChild(s);const a=t.getCoordinates(),p=this.getCoords_(a,o,i);writeStringTextNode(s,p)}writeMultiPoint(e,t,r){const n=r[r.length-1],i=n.hasZ,o=n.srsName;o&&e.setAttribute("srsName",o);const s=t.getPoints();pushSerializeAndPop({node:e,hasZ:i,srsName:o},this.POINTMEMBER_SERIALIZERS,makeSimpleNodeFactory("pointMember"),s,r,void 0,this)}writePointMember(e,t,r){const n=createElementNS(e.namespaceURI,"Point");e.appendChild(n),this.writePoint(n,t,r)}writeLinearRing(e,t,r){const n=r[r.length-1].srsName;n&&e.setAttribute("srsName",n);const i=this.createCoordinatesNode_(e.namespaceURI);e.appendChild(i),this.writeCoordinates_(i,t,r)}writeMultiSurfaceOrPolygon(e,t,r){const n=r[r.length-1],i=n.hasZ,o=n.srsName,s=n.surface;o&&e.setAttribute("srsName",o);const a=t.getPolygons();pushSerializeAndPop({node:e,hasZ:i,srsName:o,surface:s},this.SURFACEORPOLYGONMEMBER_SERIALIZERS,this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,a,r,void 0,this)}writeSurfaceOrPolygonMember(e,t,r){const n=this.GEOMETRY_NODE_FACTORY_(t,r);n&&(e.appendChild(n),this.writeSurfaceOrPolygon(n,t,r))}writeEnvelope(e,t,r){const n=r[r.length-1].srsName;n&&e.setAttribute("srsName",n);const i=[t[0]+" "+t[1],t[2]+" "+t[3]];pushSerializeAndPop({node:e},this.ENVELOPE_SERIALIZERS,OBJECT_PROPERTY_NODE_FACTORY,i,r,["lowerCorner","upperCorner"],this)}MULTIGEOMETRY_MEMBER_NODE_FACTORY_(e,t,r){const n=t[t.length-1].node;return createElementNS("http://www.opengis.net/gml",MULTIGEOMETRY_TO_MEMBER_NODENAME[n.nodeName])}}GML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS={"http://www.opengis.net/gml":{coordinates:makeReplacer(GML2.prototype.readFlatCoordinates)}},GML2.prototype.FLAT_LINEAR_RINGS_PARSERS={"http://www.opengis.net/gml":{innerBoundaryIs:GML2.prototype.innerBoundaryIsParser,outerBoundaryIs:GML2.prototype.outerBoundaryIsParser}},GML2.prototype.BOX_PARSERS_={"http://www.opengis.net/gml":{coordinates:makeArrayPusher(GML2.prototype.readFlatCoordinates)}},GML2.prototype.GEOMETRY_PARSERS={"http://www.opengis.net/gml":{Point:makeReplacer(GMLBase.prototype.readPoint),MultiPoint:makeReplacer(GMLBase.prototype.readMultiPoint),LineString:makeReplacer(GMLBase.prototype.readLineString),MultiLineString:makeReplacer(GMLBase.prototype.readMultiLineString),LinearRing:makeReplacer(GMLBase.prototype.readLinearRing),Polygon:makeReplacer(GMLBase.prototype.readPolygon),MultiPolygon:makeReplacer(GMLBase.prototype.readMultiPolygon),Box:makeReplacer(GML2.prototype.readBox)}},GML2.prototype.GEOMETRY_SERIALIZERS={"http://www.opengis.net/gml":{Curve:makeChildAppender(GML2.prototype.writeCurveOrLineString),MultiCurve:makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),Point:makeChildAppender(GML2.prototype.writePoint),MultiPoint:makeChildAppender(GML2.prototype.writeMultiPoint),LineString:makeChildAppender(GML2.prototype.writeCurveOrLineString),MultiLineString:makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),LinearRing:makeChildAppender(GML2.prototype.writeLinearRing),Polygon:makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),MultiPolygon:makeChildAppender(GML2.prototype.writeMultiSurfaceOrPolygon),Surface:makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),MultiSurface:makeChildAppender(GML2.prototype.writeMultiSurfaceOrPolygon),Envelope:makeChildAppender(GML2.prototype.writeEnvelope)}},GML2.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS={"http://www.opengis.net/gml":{lineStringMember:makeChildAppender(GML2.prototype.writeLineStringOrCurveMember),curveMember:makeChildAppender(GML2.prototype.writeLineStringOrCurveMember)}},GML2.prototype.RING_SERIALIZERS={"http://www.opengis.net/gml":{outerBoundaryIs:makeChildAppender(GML2.prototype.writeRing),innerBoundaryIs:makeChildAppender(GML2.prototype.writeRing)}},GML2.prototype.POINTMEMBER_SERIALIZERS={"http://www.opengis.net/gml":{pointMember:makeChildAppender(GML2.prototype.writePointMember)}},GML2.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS={"http://www.opengis.net/gml":{surfaceMember:makeChildAppender(GML2.prototype.writeSurfaceOrPolygonMember),polygonMember:makeChildAppender(GML2.prototype.writeSurfaceOrPolygonMember)}},GML2.prototype.ENVELOPE_SERIALIZERS={"http://www.opengis.net/gml":{lowerCorner:makeChildAppender(writeStringTextNode),upperCorner:makeChildAppender(writeStringTextNode)}};export default GML2;
//# sourceMappingURL=/sm/dee282b757506e6c2b51c31da098b8e111899f6f0838138020db7d0a24b4d015.map