/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/proj.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Projection from"./proj/Projection.js";import{PROJECTIONS as EPSG3857_PROJECTIONS,fromEPSG4326,toEPSG4326}from"./proj/epsg3857.js";import{PROJECTIONS as EPSG4326_PROJECTIONS}from"./proj/epsg4326.js";import{METERS_PER_UNIT}from"./proj/Units.js";import{add as addProj,clear as clearProj,get as getProj}from"./proj/projections.js";import{add as addTransformFunc,clear as clearTransformFuncs,get as getTransformFunc}from"./proj/transforms.js";import{applyTransform,getWidth}from"./extent.js";import{clamp,modulo}from"./math.js";import{equals,getWorldsAway}from"./coordinate.js";import{getDistance}from"./sphere.js";import{warn}from"./console.js";export{METERS_PER_UNIT};export{Projection};let showCoordinateWarning=!0;export function disableCoordinateWarning(r){showCoordinateWarning=!(void 0===r||r)}export function cloneTransform(r,o){if(void 0!==o)for(let t=0,e=r.length;t<e;++t)o[t]=r[t];else o=r.slice();return o}export function identityTransform(r,o){if(void 0!==o&&r!==o){for(let t=0,e=r.length;t<e;++t)o[t]=r[t];r=o}return r}export function addProjection(r){addProj(r.getCode(),r),addTransformFunc(r,r,cloneTransform)}export function addProjections(r){r.forEach(addProjection)}export function get(r){return"string"==typeof r?getProj(r):r||null}export function getPointResolution(r,o,t,e){let n;const i=(r=get(r)).getPointResolutionFunc();if(i){if(n=i(o,t),e&&e!==r.getUnits()){const o=r.getMetersPerUnit();o&&(n=n*o/METERS_PER_UNIT[e])}}else{const i=r.getUnits();if("degrees"==i&&!e||"degrees"==e)n=o;else{const s=getTransformFromProjections(r,get("EPSG:4326"));if(s===identityTransform&&"degrees"!==i)n=o*r.getMetersPerUnit();else{let r=[t[0]-o/2,t[1],t[0]+o/2,t[1],t[0],t[1]-o/2,t[0],t[1]+o/2];r=s(r,r,2);n=(getDistance(r.slice(0,2),r.slice(2,4))+getDistance(r.slice(4,6),r.slice(6,8)))/2}const a=e?METERS_PER_UNIT[e]:r.getMetersPerUnit();void 0!==a&&(n/=a)}}return n}export function addEquivalentProjections(r){addProjections(r),r.forEach((function(o){r.forEach((function(r){o!==r&&addTransformFunc(o,r,cloneTransform)}))}))}export function addEquivalentTransforms(r,o,t,e){r.forEach((function(r){o.forEach((function(o){addTransformFunc(r,o,t),addTransformFunc(o,r,e)}))}))}export function clearAllProjections(){clearProj(),clearTransformFuncs()}export function createProjection(r,o){return r?"string"==typeof r?get(r):r:get(o)}export function createTransformFromCoordinateTransform(r){return function(o,t,e){const n=o.length;e=void 0!==e?e:2,t=void 0!==t?t:new Array(n);for(let i=0;i<n;i+=e){const n=r(o.slice(i,i+e)),s=n.length;for(let r=0,a=e;r<a;++r)t[i+r]=r>=s?o[i+r]:n[r]}return t}}export function addCoordinateTransforms(r,o,t,e){const n=get(r),i=get(o);addTransformFunc(n,i,createTransformFromCoordinateTransform(t)),addTransformFunc(i,n,createTransformFromCoordinateTransform(e))}export function fromLonLat(r,o){return disableCoordinateWarning(),transform(r,"EPSG:4326",void 0!==o?o:"EPSG:3857")}export function toLonLat(r,o){const t=transform(r,void 0!==o?o:"EPSG:3857","EPSG:4326"),e=t[0];return(e<-180||e>180)&&(t[0]=modulo(e+180,360)-180),t}export function equivalent(r,o){if(r===o)return!0;const t=r.getUnits()===o.getUnits();if(r.getCode()===o.getCode())return t;return getTransformFromProjections(r,o)===cloneTransform&&t}export function getTransformFromProjections(r,o){const t=r.getCode(),e=o.getCode();let n=getTransformFunc(t,e);return n||(n=identityTransform),n}export function getTransform(r,o){return getTransformFromProjections(get(r),get(o))}export function transform(r,o,t){return getTransform(o,t)(r,void 0,r.length)}export function transformExtent(r,o,t,e){const n=getTransform(o,t);return applyTransform(r,n,void 0,e)}export function transformWithProjections(r,o,t){return getTransformFromProjections(o,t)(r)}let userProjection=null;export function setUserProjection(r){userProjection=get(r)}export function clearUserProjection(){userProjection=null}export function getUserProjection(){return userProjection}export function useGeographic(){setUserProjection("EPSG:4326")}export function toUserCoordinate(r,o){return userProjection?transform(r,o,userProjection):r}export function fromUserCoordinate(r,o){return userProjection?transform(r,userProjection,o):(showCoordinateWarning&&!equals(r,[0,0])&&r[0]>=-180&&r[0]<=180&&r[1]>=-90&&r[1]<=90&&(showCoordinateWarning=!1,warn("Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.")),r)}export function toUserExtent(r,o){return userProjection?transformExtent(r,o,userProjection):r}export function fromUserExtent(r,o){return userProjection?transformExtent(r,userProjection,o):r}export function toUserResolution(r,o){if(!userProjection)return r;const t=get(o).getUnits(),e=userProjection.getUnits();return t&&e?r*METERS_PER_UNIT[t]/METERS_PER_UNIT[e]:r}export function fromUserResolution(r,o){if(!userProjection)return r;const t=get(o).getUnits(),e=userProjection.getUnits();return t&&e?r*METERS_PER_UNIT[e]/METERS_PER_UNIT[t]:r}export function createSafeCoordinateTransform(r,o,t){return function(e){let n,i;if(r.canWrapX()){const o=r.getExtent(),s=getWidth(o);e=e.slice(0),i=getWorldsAway(e,r,s),i&&(e[0]=e[0]-i*s),e[0]=clamp(e[0],o[0],o[2]),e[1]=clamp(e[1],o[1],o[3]),n=t(e)}else n=t(e);return i&&o.canWrapX()&&(n[0]+=i*getWidth(o.getExtent())),n}}export function addCommon(){addEquivalentProjections(EPSG3857_PROJECTIONS),addEquivalentProjections(EPSG4326_PROJECTIONS),addEquivalentTransforms(EPSG4326_PROJECTIONS,EPSG3857_PROJECTIONS,fromEPSG4326,toEPSG4326)}addCommon();
//# sourceMappingURL=/sm/f54e26923ba5436ea136f86fa9fc8248342988a899862b9501dd97e442111a35.map