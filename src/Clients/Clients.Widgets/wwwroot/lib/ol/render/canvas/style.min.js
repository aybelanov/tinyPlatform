/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/render/canvas/style.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Circle from"../../style/Circle.js";import Fill from"../../style/Fill.js";import Icon from"../../style/Icon.js";import RegularShape from"../../style/RegularShape.js";import Stroke from"../../style/Stroke.js";import Style from"../../style/Style.js";import Text from"../../style/Text.js";import{BooleanType,ColorType,NumberArrayType,NumberType,StringType,newParsingContext}from"../../expr/expression.js";import{buildExpression,newEvaluationContext}from"../../expr/cpu.js";import{toSize}from"../../size.js";function always(t){return!0}export function rulesToStyleFunction(t){const r=buildRuleSet(t,newParsingContext()),e=newEvaluationContext();return function(t,o){return e.properties=t.getPropertiesInternal(),e.resolution=o,r(e)}}export function flatStylesToStyleFunction(t){const r=newParsingContext(),e=t.length,o=new Array(e);for(let n=0;n<e;++n)o[n]=buildStyle(t[n],r);const n=newEvaluationContext(),i=new Array(e);return function(t,r){n.properties=t.getPropertiesInternal(),n.resolution=r;for(let t=0;t<e;++t)i[t]=o[t](n);return i}}export function buildRuleSet(t,r){const e=t.length,o=new Array(e);for(let n=0;n<e;++n){const e=t[n],i="filter"in e?buildExpression(e.filter,BooleanType,r):always;let u;if(Array.isArray(e.style)){const t=e.style.length;u=new Array(t);for(let o=0;o<t;++o)u[o]=buildStyle(e.style[o],r)}else u=[buildStyle(e.style,r)];o[n]={filter:i,styles:u}}return function(r){const n=[];let i=!1;for(let u=0;u<e;++u){if((0,o[u].filter)(r)&&(!t[u].else||!i)){i=!0;for(const t of o[u].styles){const e=t(r);e&&n.push(e)}}}return n}}export function buildStyle(t,r){const e=buildFill(t,"",r),o=buildStroke(t,"",r),n=buildText(t,r),i=buildImage(t,r),u=numberEvaluator(t,"z-index",r),l=new Style;return function(t){let r=!0;if(e){const o=e(t);o&&(r=!1),l.setFill(o)}if(o){const e=o(t);e&&(r=!1),l.setStroke(e)}if(n){const e=n(t);e&&(r=!1),l.setText(e)}if(i){const e=i(t);e&&(r=!1),l.setImage(e)}return u&&l.setZIndex(u(t)),r?null:l}}function buildFill(t,r,e){const o=colorLikeEvaluator(t,r+"fill-color",e);if(!o)return null;const n=new Fill;return function(t){const r=o(t);return"none"===r?null:(n.setColor(r),n)}}function buildStroke(t,r,e){const o=numberEvaluator(t,r+"stroke-width",e),n=colorLikeEvaluator(t,r+"stroke-color",e);if(!o&&!n)return null;const i=stringEvaluator(t,r+"stroke-line-cap",e),u=stringEvaluator(t,r+"stroke-line-join",e),l=numberArrayEvaluator(t,r+"stroke-line-dash",e),a=numberEvaluator(t,r+"stroke-line-dash-offset",e),s=numberEvaluator(t,r+"stroke-miter-limit",e),c=new Stroke;return function(t){if(n){const r=n(t);if("none"===r)return null;c.setColor(r)}if(o&&c.setWidth(o(t)),i){const r=i(t);if("butt"!==r&&"round"!==r&&"square"!==r)throw new Error("Expected butt, round, or square line cap");c.setLineCap(r)}if(u){const r=u(t);if("bevel"!==r&&"round"!==r&&"miter"!==r)throw new Error("Expected bevel, round, or miter line join");c.setLineJoin(r)}return l&&c.setLineDash(l(t)),a&&c.setLineDashOffset(a(t)),s&&c.setMiterLimit(s(t)),c}}function buildText(t,r){const e="text-",o=stringEvaluator(t,e+"value",r);if(!o)return null;const n=buildFill(t,e,r),i=buildFill(t,e+"background-",r),u=buildStroke(t,e,r),l=buildStroke(t,e+"background-",r),a=stringEvaluator(t,e+"font",r),s=numberEvaluator(t,e+"max-angle",r),c=numberEvaluator(t,e+"offset-x",r),f=numberEvaluator(t,e+"offset-y",r),p=booleanEvaluator(t,e+"overflow",r),d=stringEvaluator(t,e+"placement",r),b=numberEvaluator(t,e+"repeat",r),m=sizeLikeEvaluator(t,e+"scale",r),E=booleanEvaluator(t,e+"rotate-with-view",r),y=numberEvaluator(t,e+"rotation",r),w=stringEvaluator(t,e+"align",r),h=stringEvaluator(t,e+"justify",r),g=stringEvaluator(t,e+"baseline",r),v=numberArrayEvaluator(t,e+"padding",r),x=new Text({});return function(t){if(x.setText(o(t)),n&&x.setFill(n(t)),i&&x.setBackgroundFill(i(t)),u&&x.setStroke(u(t)),l&&x.setBackgroundStroke(l(t)),a&&x.setFont(a(t)),s&&x.setMaxAngle(s(t)),c&&x.setOffsetX(c(t)),f&&x.setOffsetY(f(t)),p&&x.setOverflow(p(t)),d){const r=d(t);if("point"!==r&&"line"!==r)throw new Error("Expected point or line for text-placement");x.setPlacement(r)}if(b&&x.setRepeat(b(t)),m&&x.setScale(m(t)),E&&x.setRotateWithView(E(t)),y&&x.setRotation(y(t)),w){const r=w(t);if("left"!==r&&"center"!==r&&"right"!==r&&"end"!==r&&"start"!==r)throw new Error("Expected left, right, center, start, or end for text-align");x.setTextAlign(r)}if(h){const r=h(t);if("left"!==r&&"right"!==r&&"center"!==r)throw new Error("Expected left, right, or center for text-justify");x.setJustify(r)}if(g){const r=g(t);if("bottom"!==r&&"top"!==r&&"middle"!==r&&"alphabetic"!==r&&"hanging"!==r)throw new Error("Expected bottom, top, middle, alphabetic, or hanging for text-baseline");x.setTextBaseline(r)}return v&&x.setPadding(v(t)),x}}function buildImage(t,r){return"icon-src"in t?buildIcon(t,r):"shape-points"in t?buildShape(t,r):"circle-radius"in t?buildCircle(t,r):null}function buildIcon(t,r){const e="icon-",o=e+"src",n=requireString(t[o],o),i=coordinateEvaluator(t,e+"anchor",r),u=sizeLikeEvaluator(t,e+"scale",r),l=numberEvaluator(t,e+"opacity",r),a=coordinateEvaluator(t,e+"displacement",r),s=numberEvaluator(t,e+"rotation",r),c=booleanEvaluator(t,e+"rotate-with-view",r),f=optionalIconOrigin(t,e+"anchor-origin"),p=optionalIconAnchorUnits(t,e+"anchor-x-units"),d=optionalIconAnchorUnits(t,e+"anchor-y-units"),b=optionalColorLike(t,e+"color"),m=optionalString(t,e+"cross-origin"),E=optionalNumberArray(t,e+"offset"),y=optionalIconOrigin(t,e+"offset-origin"),w=optionalNumber(t,e+"width"),h=optionalNumber(t,e+"height"),g=optionalSize(t,e+"size"),v=optionalDeclutterMode(t,e+"declutter"),x=new Icon({src:n,anchorOrigin:f,anchorXUnits:p,anchorYUnits:d,color:b,crossOrigin:m,offset:E,offsetOrigin:y,height:h,width:w,size:g,declutterMode:v});return function(t){return l&&x.setOpacity(l(t)),a&&x.setDisplacement(a(t)),s&&x.setRotation(s(t)),c&&x.setRotateWithView(c(t)),u&&x.setScale(u(t)),i&&x.setAnchor(i(t)),x}}function buildShape(t,r){const e="shape-",o=e+"points",n=requireNumber(t[o],o),i=buildFill(t,e,r),u=buildStroke(t,e,r),l=sizeLikeEvaluator(t,e+"scale",r),a=coordinateEvaluator(t,e+"displacement",r),s=numberEvaluator(t,e+"rotation",r),c=booleanEvaluator(t,e+"rotate-with-view",r),f=optionalNumber(t,e+"radius"),p=optionalNumber(t,e+"radius1"),d=optionalNumber(t,e+"radius2"),b=optionalNumber(t,e+"angle"),m=optionalDeclutterMode(t,e+"declutter-mode"),E=new RegularShape({points:n,radius:f,radius1:p,radius2:d,angle:b,declutterMode:m});return function(t){return i&&E.setFill(i(t)),u&&E.setStroke(u(t)),a&&E.setDisplacement(a(t)),s&&E.setRotation(s(t)),c&&E.setRotateWithView(c(t)),l&&E.setScale(l(t)),E}}function buildCircle(t,r){const e="circle-",o=buildFill(t,e,r),n=buildStroke(t,e,r),i=numberEvaluator(t,e+"radius",r),u=sizeLikeEvaluator(t,e+"scale",r),l=coordinateEvaluator(t,e+"displacement",r),a=numberEvaluator(t,e+"rotation",r),s=booleanEvaluator(t,e+"rotate-with-view",r),c=optionalDeclutterMode(t,e+"declutter-mode"),f=new Circle({radius:5,declutterMode:c});return function(t){return i&&f.setRadius(i(t)),o&&f.setFill(o(t)),n&&f.setStroke(n(t)),l&&f.setDisplacement(l(t)),a&&f.setRotation(a(t)),s&&f.setRotateWithView(s(t)),u&&f.setScale(u(t)),f}}function numberEvaluator(t,r,e){if(!(r in t))return;const o=buildExpression(t[r],NumberType,e);return function(t){return requireNumber(o(t),r)}}function stringEvaluator(t,r,e){if(!(r in t))return null;const o=buildExpression(t[r],StringType,e);return function(t){return requireString(o(t),r)}}function booleanEvaluator(t,r,e){if(!(r in t))return null;const o=buildExpression(t[r],BooleanType,e);return function(t){const e=o(t);if("boolean"!=typeof e)throw new Error(`Expected a boolean for ${r}`);return e}}function colorLikeEvaluator(t,r,e){if(!(r in t))return null;const o=buildExpression(t[r],ColorType|StringType,e);return function(t){return requireColorLike(o(t),r)}}function numberArrayEvaluator(t,r,e){if(!(r in t))return null;const o=buildExpression(t[r],NumberArrayType,e);return function(t){return requireNumberArray(o(t),r)}}function coordinateEvaluator(t,r,e){if(!(r in t))return null;const o=buildExpression(t[r],NumberArrayType,e);return function(t){const e=requireNumberArray(o(t),r);if(2!==e.length)throw new Error(`Expected two numbers for ${r}`);return e}}function sizeLikeEvaluator(t,r,e){if(!(r in t))return null;const o=buildExpression(t[r],NumberArrayType|NumberType,e);return function(t){return requireSizeLike(o(t),r)}}function optionalNumber(t,r){const e=t[r];if(void 0!==e){if("number"!=typeof e)throw new Error(`Expected a number for ${r}`);return e}}function optionalSize(t,r){const e=t[r];if(void 0!==e){if("number"==typeof e)return toSize(e);if(!Array.isArray(e))throw new Error(`Expected a number or size array for ${r}`);if(2!==e.length||"number"!=typeof e[0]||"number"!=typeof e[1])throw new Error(`Expected a number or size array for ${r}`);return e}}function optionalString(t,r){const e=t[r];if(void 0!==e){if("string"!=typeof e)throw new Error(`Expected a string for ${r}`);return e}}function optionalIconOrigin(t,r){const e=t[r];if(void 0!==e){if("bottom-left"!==e&&"bottom-right"!==e&&"top-left"!==e&&"top-right"!==e)throw new Error(`Expected bottom-left, bottom-right, top-left, or top-right for ${r}`);return e}}function optionalIconAnchorUnits(t,r){const e=t[r];if(void 0!==e){if("pixels"!==e&&"fraction"!==e)throw new Error(`Expected pixels or fraction for ${r}`);return e}}function optionalNumberArray(t,r){const e=t[r];if(void 0!==e)return requireNumberArray(e,r)}function optionalDeclutterMode(t,r){const e=t[r];if(void 0!==e){if("string"!=typeof e)throw new Error(`Expected a string for ${r}`);if("declutter"!==e&&"obstacle"!==e&&"none"!==e)throw new Error(`Expected declutter, obstacle, or none for ${r}`);return e}}function optionalColorLike(t,r){const e=t[r];if(void 0!==e)return requireColorLike(e,r)}function requireNumberArray(t,r){if(!Array.isArray(t))throw new Error(`Expected an array for ${r}`);const e=t.length;for(let o=0;o<e;++o)if("number"!=typeof t[o])throw new Error(`Expected an array of numbers for ${r}`);return t}function requireString(t,r){if("string"!=typeof t)throw new Error(`Expected a string for ${r}`);return t}function requireNumber(t,r){if("number"!=typeof t)throw new Error(`Expected a number for ${r}`);return t}function requireColorLike(t,r){if("string"==typeof t)return t;const e=requireNumberArray(t,r),o=e.length;if(o<3||o>4)throw new Error(`Expected a color with 3 or 4 values for ${r}`);return e}function requireSizeLike(t,r){if("number"==typeof t)return t;const e=requireNumberArray(t,r);if(2!==e.length)throw new Error(`Expected an array of two numbers for ${r}`);return e}
//# sourceMappingURL=/sm/8fa45d374b62249725aacfe0e9b7430d47d32722d3bf187fd5cfbb79da959f17.map