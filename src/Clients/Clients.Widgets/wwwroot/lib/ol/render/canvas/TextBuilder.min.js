/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/render/canvas/TextBuilder.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import CanvasBuilder from"./Builder.js";import CanvasInstruction from"./Instruction.js";import{asColorLike}from"../../colorlike.js";import{defaultFillStyle,defaultFont,defaultLineCap,defaultLineDash,defaultLineDashOffset,defaultLineJoin,defaultLineWidth,defaultMiterLimit,defaultPadding,defaultStrokeStyle,defaultTextAlign,defaultTextBaseline,registerFont}from"../canvas.js";import{getUid}from"../../util.js";import{intersects}from"../../extent.js";import{lineChunk}from"../../geom/flat/linechunk.js";import{matchingChunk}from"../../geom/flat/straightchunk.js";export const TEXT_ALIGN={left:0,center:.5,right:1,top:0,middle:.5,hanging:.2,alphabetic:.8,ideographic:.8,bottom:1};class CanvasTextBuilder extends CanvasBuilder{constructor(t,e,i,s){super(t,e,i,s),this.labels_=null,this.text_="",this.textOffsetX_=0,this.textOffsetY_=0,this.textRotateWithView_=void 0,this.textRotation_=0,this.textFillState_=null,this.fillStates={},this.fillStates[defaultFillStyle]={fillStyle:defaultFillStyle},this.textStrokeState_=null,this.strokeStates={},this.textState_={},this.textStates={},this.textKey_="",this.fillKey_="",this.strokeKey_="",this.declutterImageWithText_=void 0}finish(){const t=super.finish();return t.textStates=this.textStates,t.fillStates=this.fillStates,t.strokeStates=this.strokeStates,t}drawText(t,e){const i=this.textFillState_,s=this.textStrokeState_,l=this.textState_;if(""===this.text_||!l||!i&&!s)return;const n=this.coordinates;let a=n.length;const o=t.getType();let h=null,r=t.getStride();if("line"!==l.placement||"LineString"!=o&&"MultiLineString"!=o&&"Polygon"!=o&&"MultiPolygon"!=o){let i=l.overflow?null:[];switch(o){case"Point":case"MultiPoint":h=t.getFlatCoordinates();break;case"LineString":h=t.getFlatMidpoint();break;case"Circle":h=t.getCenter();break;case"MultiLineString":h=t.getFlatMidpoints(),r=2;break;case"Polygon":h=t.getFlatInteriorPoint(),l.overflow||i.push(h[2]/this.resolution),r=3;break;case"MultiPolygon":const e=t.getFlatInteriorPoints();h=[];for(let t=0,s=e.length;t<s;t+=3)l.overflow||i.push(e[t+2]/this.resolution),h.push(e[t],e[t+1]);if(0===h.length)return;r=2}const s=this.appendFlatPointCoordinates(h,r);if(s===a)return;if(i&&(s-a)/2!=h.length/r){let t=a/2;i=i.filter(((e,i)=>{const s=n[2*(t+i)]===h[i*r]&&n[2*(t+i)+1]===h[i*r+1];return s||--t,s}))}this.saveTextStates_(),(l.backgroundFill||l.backgroundStroke)&&(this.setFillStrokeStyle(l.backgroundFill,l.backgroundStroke),l.backgroundFill&&this.updateFillStyle(this.state,this.createFill),l.backgroundStroke&&(this.updateStrokeStyle(this.state,this.applyStroke),this.hitDetectionInstructions.push(this.createStroke(this.state)))),this.beginGeometry(t,e);let f=l.padding;if(f!=defaultPadding&&(l.scale[0]<0||l.scale[1]<0)){let t=l.padding[0],e=l.padding[1],i=l.padding[2],s=l.padding[3];l.scale[0]<0&&(e=-e,s=-s),l.scale[1]<0&&(t=-t,i=-i),f=[t,e,i,s]}const d=this.pixelRatio;this.instructions.push([CanvasInstruction.DRAW_IMAGE,a,s,null,NaN,NaN,NaN,1,0,0,this.textRotateWithView_,this.textRotation_,[1,1],NaN,void 0,this.declutterImageWithText_,f==defaultPadding?defaultPadding:f.map((function(t){return t*d})),!!l.backgroundFill,!!l.backgroundStroke,this.text_,this.textKey_,this.strokeKey_,this.fillKey_,this.textOffsetX_,this.textOffsetY_,i]);const u=1/d,g=this.state.fillStyle;l.backgroundFill&&(this.state.fillStyle=defaultFillStyle,this.hitDetectionInstructions.push(this.createFill(this.state))),this.hitDetectionInstructions.push([CanvasInstruction.DRAW_IMAGE,a,s,null,NaN,NaN,NaN,1,0,0,this.textRotateWithView_,this.textRotation_,[u,u],NaN,void 0,this.declutterImageWithText_,f,!!l.backgroundFill,!!l.backgroundStroke,this.text_,this.textKey_,this.strokeKey_,this.fillKey_?defaultFillStyle:this.fillKey_,this.textOffsetX_,this.textOffsetY_,i]),l.backgroundFill&&(this.state.fillStyle=g,this.hitDetectionInstructions.push(this.createFill(this.state))),this.endGeometry(e)}else{if(!intersects(this.getBufferedMaxExtent(),t.getExtent()))return;let i;if(h=t.getFlatCoordinates(),"LineString"==o)i=[h.length];else if("MultiLineString"==o)i=t.getEnds();else if("Polygon"==o)i=t.getEnds().slice(0,1);else if("MultiPolygon"==o){const e=t.getEndss();i=[];for(let t=0,s=e.length;t<s;++t)i.push(e[t][0])}this.beginGeometry(t,e);const s=l.repeat,f=s?void 0:l.textAlign;let d=0;for(let t=0,e=i.length;t<e;++t){let e;e=s?lineChunk(s*this.resolution,h,d,i[t],r):[h.slice(d,i[t])];for(let s=0,o=e.length;s<o;++s){const o=e[s];let h=0,u=o.length;if(null==f){const t=matchingChunk(l.maxAngle,o,0,o.length,2);h=t[0],u=t[1]}for(let t=h;t<u;t+=r)n.push(o[t],o[t+1]);const g=n.length;d=i[t],this.drawChars_(a,g),a=g}}this.endGeometry(e)}}saveTextStates_(){const t=this.textStrokeState_,e=this.textState_,i=this.textFillState_,s=this.strokeKey_;t&&(s in this.strokeStates||(this.strokeStates[s]={strokeStyle:t.strokeStyle,lineCap:t.lineCap,lineDashOffset:t.lineDashOffset,lineWidth:t.lineWidth,lineJoin:t.lineJoin,miterLimit:t.miterLimit,lineDash:t.lineDash}));const l=this.textKey_;l in this.textStates||(this.textStates[l]={font:e.font,textAlign:e.textAlign||defaultTextAlign,justify:e.justify,textBaseline:e.textBaseline||defaultTextBaseline,scale:e.scale});const n=this.fillKey_;i&&(n in this.fillStates||(this.fillStates[n]={fillStyle:i.fillStyle}))}drawChars_(t,e){const i=this.textStrokeState_,s=this.textState_,l=this.strokeKey_,n=this.textKey_,a=this.fillKey_;this.saveTextStates_();const o=this.pixelRatio,h=TEXT_ALIGN[s.textBaseline],r=this.textOffsetY_*o,f=this.text_,d=i?i.lineWidth*Math.abs(s.scale[0])/2:0;this.instructions.push([CanvasInstruction.DRAW_CHARS,t,e,h,s.overflow,a,s.maxAngle,o,r,l,d*o,f,n,1]),this.hitDetectionInstructions.push([CanvasInstruction.DRAW_CHARS,t,e,h,s.overflow,a?defaultFillStyle:a,s.maxAngle,o,r,l,d*o,f,n,1/o])}setTextStyle(t,e){let i,s,l;if(t){const e=t.getFill();e?(s=this.textFillState_,s||(s={},this.textFillState_=s),s.fillStyle=asColorLike(e.getColor()||defaultFillStyle)):(s=null,this.textFillState_=s);const n=t.getStroke();if(n){l=this.textStrokeState_,l||(l={},this.textStrokeState_=l);const t=n.getLineDash(),e=n.getLineDashOffset(),i=n.getWidth(),s=n.getMiterLimit();l.lineCap=n.getLineCap()||defaultLineCap,l.lineDash=t?t.slice():defaultLineDash,l.lineDashOffset=void 0===e?defaultLineDashOffset:e,l.lineJoin=n.getLineJoin()||defaultLineJoin,l.lineWidth=void 0===i?defaultLineWidth:i,l.miterLimit=void 0===s?defaultMiterLimit:s,l.strokeStyle=asColorLike(n.getColor()||defaultStrokeStyle)}else l=null,this.textStrokeState_=l;i=this.textState_;const a=t.getFont()||defaultFont;registerFont(a);const o=t.getScaleArray();i.overflow=t.getOverflow(),i.font=a,i.maxAngle=t.getMaxAngle(),i.placement=t.getPlacement(),i.textAlign=t.getTextAlign(),i.repeat=t.getRepeat(),i.justify=t.getJustify(),i.textBaseline=t.getTextBaseline()||defaultTextBaseline,i.backgroundFill=t.getBackgroundFill(),i.backgroundStroke=t.getBackgroundStroke(),i.padding=t.getPadding()||defaultPadding,i.scale=void 0===o?[1,1]:o;const h=t.getOffsetX(),r=t.getOffsetY(),f=t.getRotateWithView(),d=t.getRotation();this.text_=t.getText()||"",this.textOffsetX_=void 0===h?0:h,this.textOffsetY_=void 0===r?0:r,this.textRotateWithView_=void 0!==f&&f,this.textRotation_=void 0===d?0:d,this.strokeKey_=l?("string"==typeof l.strokeStyle?l.strokeStyle:getUid(l.strokeStyle))+l.lineCap+l.lineDashOffset+"|"+l.lineWidth+l.lineJoin+l.miterLimit+"["+l.lineDash.join()+"]":"",this.textKey_=i.font+i.scale+(i.textAlign||"?")+(i.repeat||"?")+(i.justify||"?")+(i.textBaseline||"?"),this.fillKey_=s?"string"==typeof s.fillStyle?s.fillStyle:"|"+getUid(s.fillStyle):""}else this.text_="";this.declutterImageWithText_=e}}export default CanvasTextBuilder;
//# sourceMappingURL=/sm/60721a43ba5cf338225d6b28dcacb6387e5e129b6a3164a1fb025c62ce5ebd5f.map