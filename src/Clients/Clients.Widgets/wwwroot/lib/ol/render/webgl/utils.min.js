/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/render/webgl/utils.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import earcut from"earcut";import{apply as applyTransform}from"../../transform.js";import{clamp}from"../../math.js";const tmpArray_=[],bufferPositions_={vertexPosition:0,indexPosition:0};function writePointVertex(t,e,o,n,r){t[e+0]=o,t[e+1]=n,t[e+2]=r}export function writePointFeatureToBuffers(t,e,o,n,r,s){const a=3+r,i=t[e+0],u=t[e+1],l=tmpArray_;l.length=r;for(let o=0;o<l.length;o++)l[o]=t[e+2+o];let c=s?s.vertexPosition:0,f=s?s.indexPosition:0;const p=c/a;return writePointVertex(o,c,i,u,0),l.length&&o.set(l,c+3),c+=a,writePointVertex(o,c,i,u,1),l.length&&o.set(l,c+3),c+=a,writePointVertex(o,c,i,u,2),l.length&&o.set(l,c+3),c+=a,writePointVertex(o,c,i,u,3),l.length&&o.set(l,c+3),c+=a,n[f++]=p,n[f++]=p+1,n[f++]=p+3,n[f++]=p+1,n[f++]=p+2,n[f++]=p+3,bufferPositions_.vertexPosition=c,bufferPositions_.indexPosition=f,bufferPositions_}export function writeLineSegmentToBuffers(t,e,o,n,r,s,a,i,u,l){const c=8+i.length,f=s.length/c,p=[t[e+0],t[e+1]],h=[t[o],t[o+1]],m=applyTransform(u,[...p]),g=applyTransform(u,[...h]);function x(t,e,o){const n=Math.sqrt((e[0]-t[0])*(e[0]-t[0])+(e[1]-t[1])*(e[1]-t[1])),r=[(e[0]-t[0])/n,(e[1]-t[1])/n],s=[-r[1],r[0]],a=Math.sqrt((o[0]-t[0])*(o[0]-t[0])+(o[1]-t[1])*(o[1]-t[1])),i=[(o[0]-t[0])/a,(o[1]-t[1])/a],u=0===n||0===a?0:Math.acos(clamp(i[0]*r[0]+i[1]*r[1],-1,1));return i[0]*s[0]+i[1]*s[1]>0?u:2*Math.PI-u}let P=-1,d=-1;const M=null!==r;if(null!==n){const e=[t[n],t[n+1]];P=x(m,g,applyTransform(u,[...e]))}if(M){const e=[t[r],t[r+1]];d=x(g,m,applyTransform(u,[...e]))}return s.push(p[0],p[1],h[0],h[1],P,d,l,0),s.push(...i),s.push(p[0],p[1],h[0],h[1],P,d,l,1),s.push(...i),s.push(p[0],p[1],h[0],h[1],P,d,l,2),s.push(...i),s.push(p[0],p[1],h[0],h[1],P,d,l,3),s.push(...i),a.push(f,f+1,f+2,f+1,f+3,f+2),l+Math.sqrt((g[0]-m[0])*(g[0]-m[0])+(g[1]-m[1])*(g[1]-m[1]))}export function writePolygonTrianglesToBuffers(t,e,o,n,r){const s=2+r;let a=e;const i=t.slice(a,a+r);a+=r;const u=t[a++];let l=0;const c=new Array(u-1);for(let e=0;e<u;e++)l+=t[a++],e<u-1&&(c[e]=l);const f=t.slice(a,a+2*l),p=earcut(f,c,2);for(let t=0;t<p.length;t++)n.push(p[t]+o.length/s);for(let t=0;t<f.length;t+=2)o.push(f[t],f[t+1],...i);return a+2*l}export function getBlankImageData(){const t=document.createElement("canvas").getContext("2d").createImageData(1,1);return t.data[0]=255,t.data[1]=255,t.data[2]=255,t.data[3]=255,t}export function colorEncodeId(t,e){const o=256,n=255;return(e=e||[])[0]=Math.floor(t/o/o/o)/n,e[1]=Math.floor(t/o/o)%o/n,e[2]=Math.floor(t/o)%o/n,e[3]=t%o/n,e}export function colorDecodeId(t){let e=0;const o=256,n=255;return e+=Math.round(t[0]*o*o*o*n),e+=Math.round(t[1]*o*o*n),e+=Math.round(t[2]*o*n),e+=Math.round(t[3]*n),e}
//# sourceMappingURL=/sm/717d4e14b9500f9dc2d4e65db85a234404ed2cd5e7333b466c97e7b5ae17e67d.map