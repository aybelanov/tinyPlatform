/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/render/webgl/MixedGeometryBatch.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{getUid}from"../../util.js";import{linearRingIsClockwise}from"../../geom/flat/orient.js";class MixedGeometryBatch{constructor(){this.polygonBatch={entries:{},geometriesCount:0,verticesCount:0,ringsCount:0},this.pointBatch={entries:{},geometriesCount:0},this.lineStringBatch={entries:{},geometriesCount:0,verticesCount:0}}addFeatures(t){for(let e=0;e<t.length;e++)this.addFeature(t[e])}addFeature(t){const e=t.getGeometry();e&&this.addGeometry_(e,t)}clearFeatureEntryInPointBatch_(t){const e=this.pointBatch.entries[getUid(t)];e&&(this.pointBatch.geometriesCount-=e.flatCoordss.length,delete this.pointBatch.entries[getUid(t)])}clearFeatureEntryInLineStringBatch_(t){const e=this.lineStringBatch.entries[getUid(t)];e&&(this.lineStringBatch.verticesCount-=e.verticesCount,this.lineStringBatch.geometriesCount-=e.flatCoordss.length,delete this.lineStringBatch.entries[getUid(t)])}clearFeatureEntryInPolygonBatch_(t){const e=this.polygonBatch.entries[getUid(t)];e&&(this.polygonBatch.verticesCount-=e.verticesCount,this.polygonBatch.ringsCount-=e.ringsCount,this.polygonBatch.geometriesCount-=e.flatCoordss.length,delete this.polygonBatch.entries[getUid(t)])}addGeometry_(t,e){const i=t.getType();switch(i){case"GeometryCollection":const n=t.getGeometriesArray();for(const t of n)this.addGeometry_(t,e);break;case"MultiPolygon":const o=t;this.addCoordinates_(i,o.getFlatCoordinates(),o.getEndss(),e,getUid(e),o.getStride());break;case"MultiLineString":const s=t;this.addCoordinates_(i,s.getFlatCoordinates(),s.getEnds(),e,getUid(e),s.getStride());break;case"MultiPoint":const r=t;this.addCoordinates_(i,r.getFlatCoordinates(),null,e,getUid(e),r.getStride());break;case"Polygon":const a=t;this.addCoordinates_(i,a.getFlatCoordinates(),a.getEnds(),e,getUid(e),a.getStride());break;case"Point":const h=t;this.addCoordinates_(i,h.getFlatCoordinates(),null,e,getUid(e),h.getStride());break;case"LineString":case"LinearRing":const l=t;this.addCoordinates_(i,l.getFlatCoordinates(),null,e,getUid(e),l.getStride())}}addCoordinates_(t,e,i,n,o,s){let r;switch(t){case"MultiPolygon":const t=i;for(let i=0,r=t.length;i<r;i++){let r=t[i];const a=i>0?t[i-1]:null,h=a?a[a.length-1]:0,l=r[r.length-1];r=h>0?r.map((t=>t-h)):r,this.addCoordinates_("Polygon",e.slice(h,l),r,n,o,s)}break;case"MultiLineString":const a=i;for(let t=0,i=a.length;t<i;t++){const i=t>0?a[t-1]:0;this.addCoordinates_("LinearRing",e.slice(i,a[t]),null,n,o,s)}break;case"MultiPoint":for(let t=0,i=e.length;t<i;t+=s)this.addCoordinates_("Point",e.slice(t,t+2),null,n,o,null);break;case"Polygon":const h=i;for(let t=1,i=h.length;t<i;t++){const i=h[t-1];if(t>0&&linearRingIsClockwise(e,i,h[t],s))return this.addCoordinates_("Polygon",e.slice(0,i),h.slice(0,t),n,o,s),void this.addCoordinates_("Polygon",e.slice(i),h.slice(t).map((e=>e-h[t-1])),n,o,s)}this.polygonBatch.entries[o]||(this.polygonBatch.entries[o]={feature:n,flatCoordss:[],verticesCount:0,ringsCount:0,ringsVerticesCounts:[]}),r=e.length/s;const l=i.length,c=i.map(((t,e,i)=>e>0?(t-i[e-1])/s:t/s));this.polygonBatch.verticesCount+=r,this.polygonBatch.ringsCount+=l,this.polygonBatch.geometriesCount++,this.polygonBatch.entries[o].flatCoordss.push(getFlatCoordinatesXY(e,s)),this.polygonBatch.entries[o].ringsVerticesCounts.push(c),this.polygonBatch.entries[o].verticesCount+=r,this.polygonBatch.entries[o].ringsCount+=l;for(let t=0,i=h.length;t<i;t++){const i=t>0?h[t-1]:0;this.addCoordinates_("LinearRing",e.slice(i,h[t]),null,n,o,s)}break;case"Point":this.pointBatch.entries[o]||(this.pointBatch.entries[o]={feature:n,flatCoordss:[]}),this.pointBatch.geometriesCount++,this.pointBatch.entries[o].flatCoordss.push(e);break;case"LineString":case"LinearRing":this.lineStringBatch.entries[o]||(this.lineStringBatch.entries[o]={feature:n,flatCoordss:[],verticesCount:0}),r=e.length/s,this.lineStringBatch.verticesCount+=r,this.lineStringBatch.geometriesCount++,this.lineStringBatch.entries[o].flatCoordss.push(getFlatCoordinatesXY(e,s)),this.lineStringBatch.entries[o].verticesCount+=r}}changeFeature(t){this.clearFeatureEntryInPointBatch_(t),this.clearFeatureEntryInPolygonBatch_(t),this.clearFeatureEntryInLineStringBatch_(t);const e=t.getGeometry();e&&this.addGeometry_(e,t)}removeFeature(t){this.clearFeatureEntryInPointBatch_(t),this.clearFeatureEntryInPolygonBatch_(t),this.clearFeatureEntryInLineStringBatch_(t)}clear(){this.polygonBatch.entries={},this.polygonBatch.geometriesCount=0,this.polygonBatch.verticesCount=0,this.polygonBatch.ringsCount=0,this.lineStringBatch.entries={},this.lineStringBatch.geometriesCount=0,this.lineStringBatch.verticesCount=0,this.pointBatch.entries={},this.pointBatch.geometriesCount=0}}function getFlatCoordinatesXY(t,e){return 2===e?t:t.filter(((t,i)=>i%e<2))}export default MixedGeometryBatch;
//# sourceMappingURL=/sm/8fd4c96021c26666cb412a5fda1633a28e92f40ef438d25b3489b161c4751e4f.map