/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/sphere.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{toDegrees,toRadians}from"./math.js";export const DEFAULT_RADIUS=6371008.8;export function getDistance(t,e,n){n=n||DEFAULT_RADIUS;const a=toRadians(t[1]),o=toRadians(e[1]),r=(o-a)/2,s=toRadians(e[0]-t[0])/2,i=Math.sin(r)*Math.sin(r)+Math.sin(s)*Math.sin(s)*Math.cos(a)*Math.cos(o);return 2*n*Math.atan2(Math.sqrt(i),Math.sqrt(1-i))}function getLengthInternal(t,e){let n=0;for(let a=0,o=t.length;a<o-1;++a)n+=getDistance(t[a],t[a+1],e);return n}export function getLength(t,e){const n=(e=e||{}).radius||DEFAULT_RADIUS,a=e.projection||"EPSG:3857",o=t.getType();"GeometryCollection"!==o&&(t=t.clone().transform(a,"EPSG:4326"));let r,s,i,g,c,h,l=0;switch(o){case"Point":case"MultiPoint":break;case"LineString":case"LinearRing":r=t.getCoordinates(),l=getLengthInternal(r,n);break;case"MultiLineString":case"Polygon":for(r=t.getCoordinates(),i=0,g=r.length;i<g;++i)l+=getLengthInternal(r[i],n);break;case"MultiPolygon":for(r=t.getCoordinates(),i=0,g=r.length;i<g;++i)for(s=r[i],c=0,h=s.length;c<h;++c)l+=getLengthInternal(s[c],n);break;case"GeometryCollection":{const n=t.getGeometries();for(i=0,g=n.length;i<g;++i)l+=getLength(n[i],e);break}default:throw new Error("Unsupported geometry type: "+o)}return l}function getAreaInternal(t,e){let n=0;const a=t.length;let o=t[a-1][0],r=t[a-1][1];for(let e=0;e<a;e++){const a=t[e][0],s=t[e][1];n+=toRadians(a-o)*(2+Math.sin(toRadians(r))+Math.sin(toRadians(s))),o=a,r=s}return n*e*e/2}export function getArea(t,e){const n=(e=e||{}).radius||DEFAULT_RADIUS,a=e.projection||"EPSG:3857",o=t.getType();"GeometryCollection"!==o&&(t=t.clone().transform(a,"EPSG:4326"));let r,s,i,g,c,h,l=0;switch(o){case"Point":case"MultiPoint":case"LineString":case"MultiLineString":case"LinearRing":break;case"Polygon":for(r=t.getCoordinates(),l=Math.abs(getAreaInternal(r[0],n)),i=1,g=r.length;i<g;++i)l-=Math.abs(getAreaInternal(r[i],n));break;case"MultiPolygon":for(r=t.getCoordinates(),i=0,g=r.length;i<g;++i)for(s=r[i],l+=Math.abs(getAreaInternal(s[0],n)),c=1,h=s.length;c<h;++c)l-=Math.abs(getAreaInternal(s[c],n));break;case"GeometryCollection":{const n=t.getGeometries();for(i=0,g=n.length;i<g;++i)l+=getArea(n[i],e);break}default:throw new Error("Unsupported geometry type: "+o)}return l}export function offset(t,e,n,a){a=a||DEFAULT_RADIUS;const o=toRadians(t[1]),r=toRadians(t[0]),s=e/a,i=Math.asin(Math.sin(o)*Math.cos(s)+Math.cos(o)*Math.sin(s)*Math.cos(n)),g=r+Math.atan2(Math.sin(n)*Math.sin(s)*Math.cos(o),Math.cos(s)-Math.sin(o)*Math.sin(i));return[toDegrees(g),toDegrees(i)]}
//# sourceMappingURL=/sm/0fa12918833891598f1b3162e2efc85380bb864c27a40eb86ad47847497363ea.map