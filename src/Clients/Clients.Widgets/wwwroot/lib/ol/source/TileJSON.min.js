/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/source/TileJSON.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import TileImage from"./TileImage.js";import{applyTransform,intersects}from"../extent.js";import{createFromTemplates}from"../tileurlfunction.js";import{createXYZ,extentFromProjection}from"../tilegrid.js";import{get as getProjection,getTransformFromProjections}from"../proj.js";import{jsonp as requestJSONP}from"../net.js";class TileJSON extends TileImage{constructor(t){if(super({attributions:t.attributions,cacheSize:t.cacheSize,crossOrigin:t.crossOrigin,interpolate:t.interpolate,projection:getProjection("EPSG:3857"),reprojectionErrorThreshold:t.reprojectionErrorThreshold,state:"loading",tileLoadFunction:t.tileLoadFunction,wrapX:void 0===t.wrapX||t.wrapX,transition:t.transition,zDirection:t.zDirection}),this.tileJSON_=null,this.tileSize_=t.tileSize,t.url)if(t.jsonp)requestJSONP(t.url,this.handleTileJSONResponse.bind(this),this.handleTileJSONError.bind(this));else{const e=new XMLHttpRequest;e.addEventListener("load",this.onXHRLoad_.bind(this)),e.addEventListener("error",this.onXHRError_.bind(this)),e.open("GET",t.url),e.send()}else{if(!t.tileJSON)throw new Error("Either `url` or `tileJSON` options must be provided");this.handleTileJSONResponse(t.tileJSON)}}onXHRLoad_(t){const e=t.target;if(!e.status||e.status>=200&&e.status<300){let t;try{t=JSON.parse(e.responseText)}catch(t){return void this.handleTileJSONError()}this.handleTileJSONResponse(t)}else this.handleTileJSONError()}onXHRError_(t){this.handleTileJSONError()}getTileJSON(){return this.tileJSON_}handleTileJSONResponse(t){const e=getProjection("EPSG:4326"),i=this.getProjection();let r;if(void 0!==t.bounds){const o=getTransformFromProjections(e,i);r=applyTransform(t.bounds,o)}const o=extentFromProjection(i),s=t.minzoom||0,n=t.maxzoom||22,l=createXYZ({extent:o,maxZoom:n,minZoom:s,tileSize:this.tileSize_});if(this.tileGrid=l,this.tileUrlFunction=createFromTemplates(t.tiles,l),t.attribution&&!this.getAttributions()){const e=void 0!==r?r:o;this.setAttributions((function(i){return intersects(e,i.extent)?[t.attribution]:null}))}this.tileJSON_=t,this.setState("ready")}handleTileJSONError(){this.setState("error")}}export default TileJSON;
//# sourceMappingURL=/sm/c0b2bcbdab7283cc35df46b5fcaa955577965ce9c81b8f129a829f358aee2be4.map