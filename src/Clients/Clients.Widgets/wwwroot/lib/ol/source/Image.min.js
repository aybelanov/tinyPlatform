/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/source/Image.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Event from"../events/Event.js";import EventType from"../events/EventType.js";import ImageState from"../ImageState.js";import ImageWrapper from"../Image.js";import ReprojImage from"../reproj/Image.js";import Source from"./Source.js";import{DECIMALS}from"./common.js";import{ceil}from"../math.js";import{containsExtent,equals,getCenter,getForViewAndSize,getHeight,getWidth}from"../extent.js";import{equivalent}from"../proj.js";import{fromResolutionLike}from"../resolution.js";import{linearFindNearest}from"../array.js";export const ImageSourceEventType={IMAGELOADSTART:"imageloadstart",IMAGELOADEND:"imageloadend",IMAGELOADERROR:"imageloaderror"};export class ImageSourceEvent extends Event{constructor(e,t){super(e),this.image=t}}class ImageSource extends Source{constructor(e){super({attributions:e.attributions,projection:e.projection,state:e.state,interpolate:void 0===e.interpolate||e.interpolate}),this.on,this.once,this.un,this.loader=e.loader||null,this.resolutions_=void 0!==e.resolutions?e.resolutions:null,this.reprojectedImage_=null,this.reprojectedRevision_=0,this.image=null,this.wantedExtent_,this.wantedResolution_,this.static_=!!e.loader&&0===e.loader.length}getResolutions(){return this.resolutions_}setResolutions(e){this.resolutions_=e}findNearestResolution(e){const t=this.getResolutions();if(t){e=t[linearFindNearest(t,e,0)]}return e}getImage(e,t,i,o){const r=this.getProjection();if(!r||!o||equivalent(r,o))return r&&(o=r),this.getImageInternal(e,t,i,o);if(this.reprojectedImage_){if(this.reprojectedRevision_==this.getRevision()&&equivalent(this.reprojectedImage_.getProjection(),o)&&this.reprojectedImage_.getResolution()==t&&equals(this.reprojectedImage_.getExtent(),e))return this.reprojectedImage_;this.reprojectedImage_.dispose(),this.reprojectedImage_=null}return this.reprojectedImage_=new ReprojImage(r,o,e,t,i,((e,t,i)=>this.getImageInternal(e,t,i,r)),this.getInterpolate()),this.reprojectedRevision_=this.getRevision(),this.reprojectedImage_}getImageInternal(e,t,i,o){if(this.loader){const o=getRequestExtent(e,t,i,1),r=this.findNearestResolution(t);if(this.image&&(this.static_||(this.wantedExtent_&&containsExtent(this.wantedExtent_,o)||containsExtent(this.image.getExtent(),o))&&(this.wantedResolution_&&fromResolutionLike(this.wantedResolution_)===r||fromResolutionLike(this.image.getResolution())===r)))return this.image;this.wantedExtent_=o,this.wantedResolution_=r,this.image=new ImageWrapper(o,r,i,this.loader),this.image.addEventListener(EventType.CHANGE,this.handleImageChange.bind(this))}return this.image}handleImageChange(e){const t=e.target;let i;switch(t.getState()){case ImageState.LOADING:this.loading=!0,i=ImageSourceEventType.IMAGELOADSTART;break;case ImageState.LOADED:this.loading=!1,i=ImageSourceEventType.IMAGELOADEND;break;case ImageState.ERROR:this.loading=!1,i=ImageSourceEventType.IMAGELOADERROR;break;default:return}this.hasListener(i)&&this.dispatchEvent(new ImageSourceEvent(i,t))}}export function defaultImageLoadFunction(e,t){e.getImage().src=t}export function getRequestExtent(e,t,i,o){const r=t/i,s=getCenter(e),n=ceil(getWidth(e)/r,DECIMALS),a=ceil(getHeight(e)/r,DECIMALS),g=n+2*ceil((o-1)*n/2,DECIMALS),m=ceil((o-1)*a/2,DECIMALS);return getForViewAndSize(s,r,0,[g,a+2*m])}export default ImageSource;
//# sourceMappingURL=/sm/4c7bf9413f2fcafa566612bed848210aced91d8a09747850841dc1e0877a59f7.map