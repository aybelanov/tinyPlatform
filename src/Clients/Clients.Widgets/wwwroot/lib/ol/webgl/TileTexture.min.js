/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/ol@8.1.0/webgl/TileTexture.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import BaseTileRepresentation from"./BaseTileRepresentation.js";import DataTile,{asArrayLike,asImageLike}from"../DataTile.js";import EventType from"../events/EventType.js";import ImageTile from"../ImageTile.js";import ReprojTile from"../reproj/Tile.js";import WebGLArrayBuffer from"./Buffer.js";import{ARRAY_BUFFER,STATIC_DRAW}from"../webgl.js";import{createCanvasContext2D}from"../dom.js";import{toSize}from"../size.js";function bindAndConfigure(e,t,r){const i=r?e.LINEAR:e.NEAREST;e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,i),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,i)}function uploadImageTexture(e,t,r,i){bindAndConfigure(e,t,i),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,r)}function uploadDataTexture(e,t,r,i,a,n){const o=e.getGL();let s,l;if(r instanceof Float32Array){s=o.FLOAT,e.getExtension("OES_texture_float");l=null!==e.getExtension("OES_texture_float_linear")}else s=o.UNSIGNED_BYTE,l=!0;bindAndConfigure(o,t,n&&l);const u=r.byteLength/i[1];let h,T=1;switch(u%8==0?T=8:u%4==0?T=4:u%2==0&&(T=2),a){case 1:h=o.LUMINANCE;break;case 2:h=o.LUMINANCE_ALPHA;break;case 3:h=o.RGB;break;case 4:h=o.RGBA;break;default:throw new Error(`Unsupported number of bands: ${a}`)}const f=o.getParameter(o.UNPACK_ALIGNMENT);o.pixelStorei(o.UNPACK_ALIGNMENT,T),o.texImage2D(o.TEXTURE_2D,0,h,i[0],i[1],0,h,s,r),o.pixelStorei(o.UNPACK_ALIGNMENT,f)}let pixelContext=null;function createPixelContext(){pixelContext=createCanvasContext2D(1,1,void 0,{willReadFrequently:!0})}class TileTexture extends BaseTileRepresentation{constructor(e){super(e),this.textures=[],this.renderSize_=toSize(e.grid.getTileSize(e.tile.tileCoord[0])),this.bandCount=NaN;const t=new WebGLArrayBuffer(ARRAY_BUFFER,STATIC_DRAW);t.fromArray([0,1,1,1,1,0,0,0]),this.helper_.flushBufferData(t),this.coords=t,this.setTile(e.tile)}uploadTile(){const e=this.helper_,t=e.getGL(),r=this.tile;let i;this.textures.length=0,i=r instanceof ImageTile||r instanceof ReprojTile?r.getImage():r.getData();const a=asImageLike(i);if(a){const e=t.createTexture();return this.textures.push(e),this.bandCount=4,uploadImageTexture(t,e,a,r.interpolate),void this.setReady()}i=asArrayLike(i);const n=r.getSize(),o=[n[0]+2*this.gutter_,n[1]+2*this.gutter_],s=i instanceof Float32Array,l=o[0]*o[1],u=s?Float32Array:Uint8Array,h=u.BYTES_PER_ELEMENT,T=i.byteLength/o[1];this.bandCount=Math.floor(T/h/o[0]);const f=Math.ceil(this.bandCount/4);if(1===f){const a=t.createTexture();return this.textures.push(a),uploadDataTexture(e,a,i,o,this.bandCount,r.interpolate),void this.setReady()}const x=new Array(f);for(let e=0;e<f;++e){const r=t.createTexture();this.textures.push(r);const i=e<f-1?4:(this.bandCount-1)%4+1;x[e]=new u(l*i)}let c=0,E=0;const d=o[0]*this.bandCount;for(let e=0;e<o[1];++e){for(let e=0;e<d;++e){const t=i[E+e],r=Math.floor(c/this.bandCount),a=e%this.bandCount,n=x[Math.floor(a/4)];n[r*(n.length/l)+a%4]=t,++c}E+=T/h}for(let t=0;t<f;++t){const i=this.textures[t],a=x[t];uploadDataTexture(e,i,a,o,a.length/l,r.interpolate)}this.setReady()}disposeInternal(){const e=this.helper_.getGL();this.helper_.deleteBuffer(this.coords);for(let t=0;t<this.textures.length;++t)e.deleteTexture(this.textures[t]);this.tile.removeEventListener(EventType.CHANGE,this.handleTileChange_)}getImagePixelData_(e,t,r){const i=this.gutter_,a=this.renderSize_[0],n=this.renderSize_[1];pixelContext||createPixelContext(),pixelContext.clearRect(0,0,1,1);const o=e.width-2*i,s=e.height-2*i,l=i+Math.floor(o*(t/a)),u=i+Math.floor(s*(r/n));let h;try{pixelContext.drawImage(e,l,u,1,1,0,0,1,1),h=pixelContext.getImageData(0,0,1,1).data}catch(e){return pixelContext=null,null}return h}getArrayPixelData_(e,t,r,i){const a=this.gutter_,n=this.renderSize_[0],o=this.renderSize_[1],s=t[0],l=t[1],u=s+2*a,h=l+2*a,T=a+Math.floor(s*(r/n)),f=a+Math.floor(l*(i/o));if(e instanceof DataView){const t=e.byteLength/(u*h),r=t*(f*u+T),i=e.buffer.slice(r,r+t);return new DataView(i)}const x=this.bandCount*(f*u+T);return e.slice(x,x+this.bandCount)}getPixelData(e,t){if(!this.loaded)return null;if(this.tile instanceof DataTile){const r=this.tile.getData(),i=asArrayLike(r);if(i){const r=this.tile.getSize();return this.getArrayPixelData_(i,r,e,t)}return this.getImagePixelData_(asImageLike(r),e,t)}return this.getImagePixelData_(this.tile.getImage(),e,t)}}export default TileTexture;
//# sourceMappingURL=/sm/5652a9be776d631534f8dba4ba82507b4f56b676b4964adf5121fed8e068458a.map